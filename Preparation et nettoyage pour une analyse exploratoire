{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e7caf989",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import Image\n",
    "\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.collections import LineCollection\n",
    "\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc6ebe3b",
   "metadata": {},
   "source": [
    "# CONTEXTE:\n",
    "Vous travaillez chez La poule qui chante, une entreprise française d’agroalimentaire. Elle souhaite se développer à l'international.\n",
    "L'international, oui, mais pour l'instant, le champ des possibles est bien large : aucun pays particulier ni aucun continent n'est pour le moment choisi. Tous les pays sont envisageables!\n",
    "Ton objectif sera de proposer une première analyse des groupements de pays que l’on peut cibler pour exporter nos poulets. Nous approfondirons ensuite l'étude de marché. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c3842622",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Image(filename='/Users/carloscorreawalasek/Desktop/16062164030098_image2.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28832751",
   "metadata": {},
   "source": [
    "# <u> 1 - Créer un notebook contenant la PREPARATION ET LE NETTOYAGE DES DONNEES à utiliser"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8afe3611",
   "metadata": {},
   "source": [
    "### Voici les étapes que nous allons suivre:\n",
    "\n",
    "- [Première étape: Importation des fichiers](#import)\n",
    "- [Deuxième étape: Nettoyage des données](#selection)\n",
    "- [Troisème étape: Jointures des fichiers](#jointure)\n",
    "- [Quatrième étape: Suppression des outliers](#outliers)\n",
    "- [Cinquième étape: Exportation des dataframes finales sous csv](#exportation)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee0b9589",
   "metadata": {},
   "source": [
    "# <u> I. Importation des données <a class=\"anchor\" id=\"import\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad77bc07",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#importation des dataframes\n",
    "dispoalim = pd.read_excel ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P9/Annexes Projet/Annexes Mission/DAN-P9-data/DisponibiliteAlimentaire_2017.xlsx')\n",
    "population = pd.read_excel ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P9/Annexes Projet/Annexes Mission/DAN-P9-data/Population_2000_2018.xlsx')\n",
    "PIB = pd.read_excel ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P9/Annexes Projet/Annexes Mission/DAN-P9-data/PIB.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63dd316f",
   "metadata": {},
   "source": [
    "# <u> II. Nettoyage des données  <a class=\"anchor\" id=\"selection\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af11924b",
   "metadata": {},
   "source": [
    "## 1. Dispoalim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "08d839a1",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code Domaine</th>\n",
       "      <th>Domaine</th>\n",
       "      <th>Code zone</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Code Élément</th>\n",
       "      <th>Élément</th>\n",
       "      <th>Code Produit</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Code année</th>\n",
       "      <th>Année</th>\n",
       "      <th>Unité</th>\n",
       "      <th>Valeur</th>\n",
       "      <th>Symbole</th>\n",
       "      <th>Description du Symbole</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5511</td>\n",
       "      <td>Production</td>\n",
       "      <td>2511</td>\n",
       "      <td>Blé et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>4281.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5611</td>\n",
       "      <td>Importations - Quantité</td>\n",
       "      <td>2511</td>\n",
       "      <td>Blé et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>2302.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5072</td>\n",
       "      <td>Variation de stock</td>\n",
       "      <td>2511</td>\n",
       "      <td>Blé et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>-119.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5911</td>\n",
       "      <td>Exportations - Quantité</td>\n",
       "      <td>2511</td>\n",
       "      <td>Blé et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>0.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5301</td>\n",
       "      <td>Disponibilité intérieure</td>\n",
       "      <td>2511</td>\n",
       "      <td>Blé et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>6701.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Code Domaine                      Domaine  Code zone         Zone  \\\n",
       "0          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "1          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "2          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "3          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "4          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "\n",
       "   Code Élément                   Élément  Code Produit          Produit  \\\n",
       "0          5511                Production          2511  Blé et produits   \n",
       "1          5611   Importations - Quantité          2511  Blé et produits   \n",
       "2          5072        Variation de stock          2511  Blé et produits   \n",
       "3          5911   Exportations - Quantité          2511  Blé et produits   \n",
       "4          5301  Disponibilité intérieure          2511  Blé et produits   \n",
       "\n",
       "   Code année  Année               Unité  Valeur Symbole  \\\n",
       "0        2017   2017  Milliers de tonnes  4281.0       S   \n",
       "1        2017   2017  Milliers de tonnes  2302.0       S   \n",
       "2        2017   2017  Milliers de tonnes  -119.0       S   \n",
       "3        2017   2017  Milliers de tonnes     0.0       S   \n",
       "4        2017   2017  Milliers de tonnes  6701.0       S   \n",
       "\n",
       "  Description du Symbole  \n",
       "0  Données standardisées  \n",
       "1  Données standardisées  \n",
       "2  Données standardisées  \n",
       "3  Données standardisées  \n",
       "4  Données standardisées  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#afficher la table dispoalim\n",
    "dispoalim.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "12fc5f7c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(176600, 14)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dispoalim.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4db5880a",
   "metadata": {},
   "source": [
    "### Séléction `Disponibilité Alimentaire en Kcal/personne/jour` pour chaque pays et on crée une nouvelle df avec les résultats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f88f0acb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code Domaine</th>\n",
       "      <th>Domaine</th>\n",
       "      <th>Code zone</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Code Élément</th>\n",
       "      <th>Élément</th>\n",
       "      <th>Code Produit</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Code année</th>\n",
       "      <th>Année</th>\n",
       "      <th>Unité</th>\n",
       "      <th>Valeur</th>\n",
       "      <th>Symbole</th>\n",
       "      <th>Description du Symbole</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>664</td>\n",
       "      <td>Disponibilité alimentaire (Kcal/personne/jour)</td>\n",
       "      <td>2511</td>\n",
       "      <td>Blé et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Kcal/personne/jour</td>\n",
       "      <td>1331.0</td>\n",
       "      <td>Fc</td>\n",
       "      <td>Donnée calculée</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>664</td>\n",
       "      <td>Disponibilité alimentaire (Kcal/personne/jour)</td>\n",
       "      <td>2805</td>\n",
       "      <td>Riz et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Kcal/personne/jour</td>\n",
       "      <td>135.0</td>\n",
       "      <td>Fc</td>\n",
       "      <td>Donnée calculée</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>664</td>\n",
       "      <td>Disponibilité alimentaire (Kcal/personne/jour)</td>\n",
       "      <td>2513</td>\n",
       "      <td>Orge et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Kcal/personne/jour</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Fc</td>\n",
       "      <td>Donnée calculée</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>664</td>\n",
       "      <td>Disponibilité alimentaire (Kcal/personne/jour)</td>\n",
       "      <td>2514</td>\n",
       "      <td>Maïs et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Kcal/personne/jour</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Fc</td>\n",
       "      <td>Donnée calculée</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>664</td>\n",
       "      <td>Disponibilité alimentaire (Kcal/personne/jour)</td>\n",
       "      <td>2517</td>\n",
       "      <td>Millet et produits</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Kcal/personne/jour</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Fc</td>\n",
       "      <td>Donnée calculée</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Code Domaine                      Domaine  Code zone         Zone  \\\n",
       "11          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "24          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "38          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "52          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "77          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "\n",
       "    Code Élément                                         Élément  \\\n",
       "11           664  Disponibilité alimentaire (Kcal/personne/jour)   \n",
       "24           664  Disponibilité alimentaire (Kcal/personne/jour)   \n",
       "38           664  Disponibilité alimentaire (Kcal/personne/jour)   \n",
       "52           664  Disponibilité alimentaire (Kcal/personne/jour)   \n",
       "77           664  Disponibilité alimentaire (Kcal/personne/jour)   \n",
       "\n",
       "    Code Produit             Produit  Code année  Année               Unité  \\\n",
       "11          2511     Blé et produits        2017   2017  Kcal/personne/jour   \n",
       "24          2805     Riz et produits        2017   2017  Kcal/personne/jour   \n",
       "38          2513    Orge et produits        2017   2017  Kcal/personne/jour   \n",
       "52          2514    Maïs et produits        2017   2017  Kcal/personne/jour   \n",
       "77          2517  Millet et produits        2017   2017  Kcal/personne/jour   \n",
       "\n",
       "    Valeur Symbole Description du Symbole  \n",
       "11  1331.0      Fc        Donnée calculée  \n",
       "24   135.0      Fc        Donnée calculée  \n",
       "38     5.0      Fc        Donnée calculée  \n",
       "52    11.0      Fc        Donnée calculée  \n",
       "77     2.0      Fc        Donnée calculée  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtrer les données de la colonne \"elements\" avec la 'Disponiblité alimentaire (kcal/personne/jour)'\n",
    "kcal = dispoalim.loc[dispoalim['Élément'] == 'Disponibilité alimentaire (Kcal/personne/jour)']\n",
    "kcal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c2a4315b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>1997.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2987.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>3400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>3345.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>3559.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Zone  Disponibilité alimentaire (Kcal/personne/jour)\n",
       "0     Afghanistan                                          1997.0\n",
       "1  Afrique du Sud                                          2987.0\n",
       "2         Albanie                                          3400.0\n",
       "3         Algérie                                          3345.0\n",
       "4       Allemagne                                          3559.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculer la somme des valeurs par pays\n",
    "somme_kcal = kcal.groupby('Zone')['Valeur'].sum().reset_index()\n",
    "\n",
    "# Renommer la colonne résultat\n",
    "somme_kcal = somme_kcal.rename(columns={'Valeur': 'Disponibilité alimentaire (Kcal/personne/jour)'})\n",
    "\n",
    "somme_kcal.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "63c057a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(172, 2)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "somme_kcal.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfe64f8b",
   "metadata": {},
   "source": [
    "### Nous nous interrésons maintenant aux données relatives à la Viande de Volailles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f3d4fdaf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code Domaine</th>\n",
       "      <th>Domaine</th>\n",
       "      <th>Code zone</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Code Élément</th>\n",
       "      <th>Élément</th>\n",
       "      <th>Code Produit</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Code année</th>\n",
       "      <th>Année</th>\n",
       "      <th>Unité</th>\n",
       "      <th>Valeur</th>\n",
       "      <th>Symbole</th>\n",
       "      <th>Description du Symbole</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5511</td>\n",
       "      <td>Production</td>\n",
       "      <td>2734</td>\n",
       "      <td>Viande de Volailles</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>28.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>652</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5611</td>\n",
       "      <td>Importations - Quantité</td>\n",
       "      <td>2734</td>\n",
       "      <td>Viande de Volailles</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>29.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>653</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5072</td>\n",
       "      <td>Variation de stock</td>\n",
       "      <td>2734</td>\n",
       "      <td>Viande de Volailles</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>0.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>654</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5301</td>\n",
       "      <td>Disponibilité intérieure</td>\n",
       "      <td>2734</td>\n",
       "      <td>Viande de Volailles</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>57.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>655</th>\n",
       "      <td>FBS</td>\n",
       "      <td>Nouveaux Bilans Alimentaire</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>5123</td>\n",
       "      <td>Pertes</td>\n",
       "      <td>2734</td>\n",
       "      <td>Viande de Volailles</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Milliers de tonnes</td>\n",
       "      <td>2.0</td>\n",
       "      <td>S</td>\n",
       "      <td>Données standardisées</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Code Domaine                      Domaine  Code zone         Zone  \\\n",
       "651          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "652          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "653          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "654          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "655          FBS  Nouveaux Bilans Alimentaire          2  Afghanistan   \n",
       "\n",
       "     Code Élément                   Élément  Code Produit  \\\n",
       "651          5511                Production          2734   \n",
       "652          5611   Importations - Quantité          2734   \n",
       "653          5072        Variation de stock          2734   \n",
       "654          5301  Disponibilité intérieure          2734   \n",
       "655          5123                    Pertes          2734   \n",
       "\n",
       "                 Produit  Code année  Année               Unité  Valeur  \\\n",
       "651  Viande de Volailles        2017   2017  Milliers de tonnes    28.0   \n",
       "652  Viande de Volailles        2017   2017  Milliers de tonnes    29.0   \n",
       "653  Viande de Volailles        2017   2017  Milliers de tonnes     0.0   \n",
       "654  Viande de Volailles        2017   2017  Milliers de tonnes    57.0   \n",
       "655  Viande de Volailles        2017   2017  Milliers de tonnes     2.0   \n",
       "\n",
       "    Symbole Description du Symbole  \n",
       "651       S  Données standardisées  \n",
       "652       S  Données standardisées  \n",
       "653       S  Données standardisées  \n",
       "654       S  Données standardisées  \n",
       "655       S  Données standardisées  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtrer les données de la colonne \"Produit\" sur 'Viande de Volailles'\n",
    "dispoalimpoulet = dispoalim.loc[dispoalim['Produit'] == 'Viande de Volailles']\n",
    "dispoalimpoulet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5a7ca831",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2061, 14)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dispoalimpoulet.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e1a9226a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Élément</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Alimentation pour touristes</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres utilisations (non alimentaire)</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Résidus</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.53</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.54</td>\n",
       "      <td>57.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>143.0</td>\n",
       "      <td>35.69</td>\n",
       "      <td>9.25</td>\n",
       "      <td>14.11</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>2035.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>85.0</td>\n",
       "      <td>16.36</td>\n",
       "      <td>6.45</td>\n",
       "      <td>6.26</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>22.0</td>\n",
       "      <td>6.38</td>\n",
       "      <td>1.50</td>\n",
       "      <td>1.97</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>264.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>71.0</td>\n",
       "      <td>19.47</td>\n",
       "      <td>4.16</td>\n",
       "      <td>7.96</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1609.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>-38.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>167.0</td>\n",
       "      <td>-29.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Élément            Zone  Alimentation pour touristes  Aliments pour animaux  \\\n",
       "0           Afghanistan                          NaN                    NaN   \n",
       "1        Afrique du Sud                          0.0                    NaN   \n",
       "2               Albanie                          NaN                    NaN   \n",
       "3               Algérie                          0.0                    NaN   \n",
       "4             Allemagne                          NaN                    NaN   \n",
       "\n",
       "Élément  Autres utilisations (non alimentaire)  \\\n",
       "0                                          NaN   \n",
       "1                                          NaN   \n",
       "2                                          NaN   \n",
       "3                                          NaN   \n",
       "4                                          NaN   \n",
       "\n",
       "Élément  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0                                                   5.0   \n",
       "1                                                 143.0   \n",
       "2                                                  85.0   \n",
       "3                                                  22.0   \n",
       "4                                                  71.0   \n",
       "\n",
       "Élément  Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "0                                                     1.53        \n",
       "1                                                    35.69        \n",
       "2                                                    16.36        \n",
       "3                                                     6.38        \n",
       "4                                                    19.47        \n",
       "\n",
       "Élément  Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "0                                                     0.33               \n",
       "1                                                     9.25               \n",
       "2                                                     6.45               \n",
       "3                                                     1.50               \n",
       "4                                                     4.16               \n",
       "\n",
       "Élément  Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "0                                                     0.54          \n",
       "1                                                    14.11          \n",
       "2                                                     6.26          \n",
       "3                                                     1.97          \n",
       "4                                                     7.96          \n",
       "\n",
       "Élément  Disponibilité intérieure  Exportations - Quantité  \\\n",
       "0                            57.0                      NaN   \n",
       "1                          2118.0                     63.0   \n",
       "2                            47.0                      0.0   \n",
       "3                           277.0                      0.0   \n",
       "4                          1739.0                    646.0   \n",
       "\n",
       "Élément  Importations - Quantité  Nourriture  Pertes  Production  Résidus  \\\n",
       "0                           29.0        55.0     2.0        28.0      0.0   \n",
       "1                          514.0      2035.0    83.0      1667.0      0.0   \n",
       "2                           38.0        47.0     NaN        13.0      0.0   \n",
       "3                            2.0       264.0    13.0       275.0      0.0   \n",
       "4                          842.0      1609.0     NaN      1514.0    -38.0   \n",
       "\n",
       "Élément  Semences  Traitement  Variation de stock  \n",
       "0             NaN         NaN                 0.0  \n",
       "1             NaN         NaN                 0.0  \n",
       "2             NaN         NaN                 4.0  \n",
       "3             NaN         NaN                 0.0  \n",
       "4             NaN       167.0               -29.0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pivotage de la table\n",
    "dispoalimpoulet = dispoalimpoulet.pivot(index = ['Zone'], columns = 'Élément', values = 'Valeur').reset_index()\n",
    "dispoalimpoulet.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba43d5ab",
   "metadata": {},
   "source": [
    "### On va supprimer les éléments qui ne nous intéressent pas pour notre étude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62f03d82",
   "metadata": {},
   "outputs": [],
   "source": [
    "# On supprime les colonnes que nous n'allons pas utiliser dans notre étude \n",
    "dispoalimpoulet = dispoalimpoulet.drop(columns=[\"Disponibilité alimentaire (Kcal/personne/jour)\",\"Alimentation pour touristes\", \"Aliments pour animaux\", \"Autres utilisations (non alimentaire)\",\n",
    "                                            \"Disponibilité alimentaire en quantité (kg/personne/an)\", \"Disponibilité de matière grasse en quantité (g/personne/jour)\",\n",
    "                                            \"Nourriture\", \"Pertes\", \"Résidus\", \"Semences\", \"Traitement\",\n",
    "                                           \"Disponibilité de protéines en quantité (g/personne/jour)\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8596941b",
   "metadata": {},
   "source": [
    "### Voici la formule finale : `Disponibilité Intérieure = Production + Importation + Variation de stock - Exportation`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "58c679d3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Élément</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>-29.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Élément            Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0           Afghanistan                      57.0           NaN          29.0   \n",
       "1        Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2               Albanie                      47.0           0.0          38.0   \n",
       "3               Algérie                     277.0           0.0           2.0   \n",
       "4             Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "Élément  Production  Variation de stock  \n",
       "0              28.0                 0.0  \n",
       "1            1667.0                 0.0  \n",
       "2              13.0                 4.0  \n",
       "3             275.0                 0.0  \n",
       "4            1514.0               -29.0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On renomme les colonnes que l'on garde\n",
    "dispoalimpoulet.rename(columns={\"Importations - Quantité\":\"Importations\", \"Exportations - Quantité\": \"Exportations\"}, inplace=True)\n",
    "dispoalimpoulet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e6cf6739",
   "metadata": {},
   "outputs": [],
   "source": [
    "dispoalimpoulet.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bc0a80cc",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Élément\n",
       "Zone                         0\n",
       "Disponibilité intérieure     2\n",
       "Exportations                37\n",
       "Importations                 2\n",
       "Production                   4\n",
       "Variation de stock           3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Valeurs manquantes par colonne\n",
    "dispoalimpoulet.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f459be60",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Élément</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>-29.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Élément            Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0           Afghanistan                      57.0           0.0          29.0   \n",
       "1        Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2               Albanie                      47.0           0.0          38.0   \n",
       "3               Algérie                     277.0           0.0           2.0   \n",
       "4             Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "Élément  Production  Variation de stock  \n",
       "0              28.0                 0.0  \n",
       "1            1667.0                 0.0  \n",
       "2              13.0                 4.0  \n",
       "3             275.0                 0.0  \n",
       "4            1514.0               -29.0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On stocke la formule dans une variable\n",
    "missvalues = dispoalimpoulet[\"Production\"] + dispoalimpoulet[\"Importations\"] + dispoalimpoulet[\"Variation de stock\"] - dispoalimpoulet[\"Disponibilité intérieure\"] \n",
    "\n",
    "# On rempli les valeurs manquantes par les résultats de l'équation pour chaque ligne\n",
    "dispoalimpoulet[\"Exportations\"] = dispoalimpoulet[\"Exportations\"].fillna(missvalues)\n",
    "dispoalimpoulet[\"Importations\"] = dispoalimpoulet[\"Importations\"].fillna(missvalues)\n",
    "dispoalimpoulet[\"Production\"] = dispoalimpoulet[\"Production\"].fillna(missvalues)\n",
    "dispoalimpoulet[\"Disponibilité intérieure\"] = dispoalimpoulet[\"Disponibilité intérieure\"].fillna(missvalues)\n",
    "dispoalimpoulet[\"Variation de stock\"] = dispoalimpoulet[\"Variation de stock\"].fillna(missvalues)\n",
    "\n",
    "dispoalimpoulet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "64ad22cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Élément\n",
       "Zone                        0\n",
       "Disponibilité intérieure    2\n",
       "Exportations                4\n",
       "Importations                2\n",
       "Production                  4\n",
       "Variation de stock          3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Valeurs manquantes par colonne\n",
    "dispoalimpoulet.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "de4149ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Élément</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Élément            Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0           Afghanistan                      57.0           0.0          29.0   \n",
       "1        Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2               Albanie                      47.0           0.0          38.0   \n",
       "3               Algérie                     277.0           0.0           2.0   \n",
       "4             Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "Élément  Production  \n",
       "0              28.0  \n",
       "1            1667.0  \n",
       "2              13.0  \n",
       "3             275.0  \n",
       "4            1514.0  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On retire la colonne 'Variation de stock' qui ne nous intéresse pas pour notre étude\n",
    "dispoalimpoulet = dispoalimpoulet.drop(columns=[\"Variation de stock\"])\n",
    "dispoalimpoulet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c983fdd4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(172, 5)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dispoalimpoulet.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b9babe58",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Élément</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Djibouti</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>Maldives</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>Ouzbékistan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>République démocratique populaire lao</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Élément                                   Zone  Disponibilité intérieure  \\\n",
       "43                                    Djibouti                       3.0   \n",
       "92                                    Maldives                      12.0   \n",
       "113                                Ouzbékistan                       NaN   \n",
       "130      République démocratique populaire lao                       NaN   \n",
       "\n",
       "Élément  Exportations  Importations  Production  \n",
       "43                NaN           3.0         NaN  \n",
       "92                NaN          12.0         NaN  \n",
       "113               NaN           NaN         NaN  \n",
       "130               NaN           NaN         NaN  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#afficher les pays qui possèdent des valeurs manquantes\n",
    "dispoalimpoulet[dispoalimpoulet.isna().any(axis=1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c78bfb3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Élément</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Élément            Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0           Afghanistan                      57.0           0.0          29.0   \n",
       "1        Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2               Albanie                      47.0           0.0          38.0   \n",
       "3               Algérie                     277.0           0.0           2.0   \n",
       "4             Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "Élément  Production  \n",
       "0              28.0  \n",
       "1            1667.0  \n",
       "2              13.0  \n",
       "3             275.0  \n",
       "4            1514.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Supprimer les lignes qui possèdent des valeurs manquantes dans toutes les variables\n",
    "dispoalimpoulet = dispoalimpoulet.dropna(how='all')\n",
    "\n",
    "# Remplacer les valeurs manquantes des lignes restantes par des 0\n",
    "dispoalimpoulet = dispoalimpoulet.fillna(0)\n",
    "\n",
    "dispoalimpoulet.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "35aef469",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Élément\n",
       "Zone                        0\n",
       "Disponibilité intérieure    0\n",
       "Exportations                0\n",
       "Importations                0\n",
       "Production                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Valeurs manquantes par colonne\n",
    "dispoalimpoulet.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "95157d84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(172, 5)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dispoalimpoulet.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d46402f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Élément\n",
       "Zone                         object\n",
       "Disponibilité intérieure    float64\n",
       "Exportations                float64\n",
       "Importations                float64\n",
       "Production                  float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#types\n",
    "dispoalimpoulet.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9594bc99",
   "metadata": {},
   "source": [
    "## 2. Population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c3428e62",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code Domaine</th>\n",
       "      <th>Domaine</th>\n",
       "      <th>Code zone</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Code Élément</th>\n",
       "      <th>Élément</th>\n",
       "      <th>Code Produit</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Code année</th>\n",
       "      <th>Année</th>\n",
       "      <th>Unité</th>\n",
       "      <th>Valeur</th>\n",
       "      <th>Symbole</th>\n",
       "      <th>Description du Symbole</th>\n",
       "      <th>Note</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>20779.953</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>21606.988</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2002</td>\n",
       "      <td>2002</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>22600.770</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>23680.871</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2004</td>\n",
       "      <td>2004</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>24726.684</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Code Domaine                       Domaine  Code zone         Zone  \\\n",
       "0           OA  Séries temporelles annuelles          2  Afghanistan   \n",
       "1           OA  Séries temporelles annuelles          2  Afghanistan   \n",
       "2           OA  Séries temporelles annuelles          2  Afghanistan   \n",
       "3           OA  Séries temporelles annuelles          2  Afghanistan   \n",
       "4           OA  Séries temporelles annuelles          2  Afghanistan   \n",
       "\n",
       "   Code Élément            Élément  Code Produit                 Produit  \\\n",
       "0           511  Population totale          3010  Population-Estimations   \n",
       "1           511  Population totale          3010  Population-Estimations   \n",
       "2           511  Population totale          3010  Population-Estimations   \n",
       "3           511  Population totale          3010  Population-Estimations   \n",
       "4           511  Population totale          3010  Population-Estimations   \n",
       "\n",
       "   Code année  Année           Unité     Valeur Symbole  \\\n",
       "0        2000   2000  1000 personnes  20779.953       X   \n",
       "1        2001   2001  1000 personnes  21606.988       X   \n",
       "2        2002   2002  1000 personnes  22600.770       X   \n",
       "3        2003   2003  1000 personnes  23680.871       X   \n",
       "4        2004   2004  1000 personnes  24726.684       X   \n",
       "\n",
       "          Description du Symbole Note  \n",
       "0  Sources internationales sûres  NaN  \n",
       "1  Sources internationales sûres  NaN  \n",
       "2  Sources internationales sûres  NaN  \n",
       "3  Sources internationales sûres  NaN  \n",
       "4  Sources internationales sûres  NaN  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#afficher la table population\n",
    "population.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c17dbf34",
   "metadata": {},
   "source": [
    "### Nous nous interrésons aux données de 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d33ecbfb",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code Domaine</th>\n",
       "      <th>Domaine</th>\n",
       "      <th>Code zone</th>\n",
       "      <th>Zone</th>\n",
       "      <th>Code Élément</th>\n",
       "      <th>Élément</th>\n",
       "      <th>Code Produit</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Code année</th>\n",
       "      <th>Année</th>\n",
       "      <th>Unité</th>\n",
       "      <th>Valeur</th>\n",
       "      <th>Symbole</th>\n",
       "      <th>Description du Symbole</th>\n",
       "      <th>Note</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>36296.113</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>202</td>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>57009.756</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>3</td>\n",
       "      <td>Albanie</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>2884.169</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>4</td>\n",
       "      <td>Algérie</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>41389.189</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>OA</td>\n",
       "      <td>Séries temporelles annuelles</td>\n",
       "      <td>79</td>\n",
       "      <td>Allemagne</td>\n",
       "      <td>511</td>\n",
       "      <td>Population totale</td>\n",
       "      <td>3010</td>\n",
       "      <td>Population-Estimations</td>\n",
       "      <td>2017</td>\n",
       "      <td>2017</td>\n",
       "      <td>1000 personnes</td>\n",
       "      <td>82658.409</td>\n",
       "      <td>X</td>\n",
       "      <td>Sources internationales sûres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Code Domaine                       Domaine  Code zone            Zone  \\\n",
       "17           OA  Séries temporelles annuelles          2     Afghanistan   \n",
       "36           OA  Séries temporelles annuelles        202  Afrique du Sud   \n",
       "55           OA  Séries temporelles annuelles          3         Albanie   \n",
       "74           OA  Séries temporelles annuelles          4         Algérie   \n",
       "93           OA  Séries temporelles annuelles         79       Allemagne   \n",
       "\n",
       "    Code Élément            Élément  Code Produit                 Produit  \\\n",
       "17           511  Population totale          3010  Population-Estimations   \n",
       "36           511  Population totale          3010  Population-Estimations   \n",
       "55           511  Population totale          3010  Population-Estimations   \n",
       "74           511  Population totale          3010  Population-Estimations   \n",
       "93           511  Population totale          3010  Population-Estimations   \n",
       "\n",
       "    Code année  Année           Unité     Valeur Symbole  \\\n",
       "17        2017   2017  1000 personnes  36296.113       X   \n",
       "36        2017   2017  1000 personnes  57009.756       X   \n",
       "55        2017   2017  1000 personnes   2884.169       X   \n",
       "74        2017   2017  1000 personnes  41389.189       X   \n",
       "93        2017   2017  1000 personnes  82658.409       X   \n",
       "\n",
       "           Description du Symbole Note  \n",
       "17  Sources internationales sûres  NaN  \n",
       "36  Sources internationales sûres  NaN  \n",
       "55  Sources internationales sûres  NaN  \n",
       "74  Sources internationales sûres  NaN  \n",
       "93  Sources internationales sûres  NaN  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtrer les données de 2017\n",
    "population17 = population.loc[population['Année'] == 2017]\n",
    "population17.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c0bf1301",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(236, 15)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "population17.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c7600040",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selectionner les colonnes qui nous interessent pour l'étude\n",
    "col = [\"Zone\", \"Valeur\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "638f5e71",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Valeur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>36296.113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>57009.756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>2884.169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>41389.189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>82658.409</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Zone     Valeur\n",
       "17     Afghanistan  36296.113\n",
       "36  Afrique du Sud  57009.756\n",
       "55         Albanie   2884.169\n",
       "74         Algérie  41389.189\n",
       "93       Allemagne  82658.409"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop17 = population17[col]\n",
    "pop17.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "62c8d2c8",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(236, 2)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop17.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "99bc0903",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/r0/65z5jkyj6qq69z144x6lgr100000gn/T/ipykernel_54248/96835469.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  pop17.rename(columns={'Valeur': 'Population'}, inplace=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>36296.113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>57009.756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>2884.169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>41389.189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>82658.409</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Zone  Population\n",
       "17     Afghanistan   36296.113\n",
       "36  Afrique du Sud   57009.756\n",
       "55         Albanie    2884.169\n",
       "74         Algérie   41389.189\n",
       "93       Allemagne   82658.409"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Renommer la colonne 'Valeur' par 'Population'\n",
    "pop17.rename(columns={'Valeur': 'Population'}, inplace=True)\n",
    "pop17.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "b1245f58",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/r0/65z5jkyj6qq69z144x6lgr100000gn/T/ipykernel_54248/3932750925.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  pop17[\"Population\"]=pop17[\"Population\"]*1000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>57009756.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>2884169.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>41389189.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>82658409.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Zone  Population\n",
       "17     Afghanistan  36296113.0\n",
       "36  Afrique du Sud  57009756.0\n",
       "55         Albanie   2884169.0\n",
       "74         Algérie  41389189.0\n",
       "93       Allemagne  82658409.0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On va la population en millions => je la multiplie par 1000\n",
    "pop17[\"Population\"]=pop17[\"Population\"]*1000\n",
    "pop17.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a18ce0d8",
   "metadata": {},
   "source": [
    "## 3. PIB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4da95d8d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Valeur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Produit Intérieur Brut (en millions de $)</td>\n",
       "      <td>18896.352020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Produit Intérieur Brut par habitant</td>\n",
       "      <td>530.149831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>Produit Intérieur Brut (en millions de $)</td>\n",
       "      <td>380851.444100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>Produit Intérieur Brut par habitant</td>\n",
       "      <td>6723.928582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>Produit Intérieur Brut (en millions de $)</td>\n",
       "      <td>13019.729860</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Zone                                    Produit         Valeur\n",
       "0     Afghanistan  Produit Intérieur Brut (en millions de $)   18896.352020\n",
       "1     Afghanistan        Produit Intérieur Brut par habitant     530.149831\n",
       "2  Afrique du Sud  Produit Intérieur Brut (en millions de $)  380851.444100\n",
       "3  Afrique du Sud        Produit Intérieur Brut par habitant    6723.928582\n",
       "4         Albanie  Produit Intérieur Brut (en millions de $)   13019.729860"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PIB.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fff8426d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Produit</th>\n",
       "      <th>Produit Intérieur Brut (en millions de $)</th>\n",
       "      <th>Produit Intérieur Brut par habitant</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zone</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>1.889635e+04</td>\n",
       "      <td>530.149831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Afrique du Sud</th>\n",
       "      <td>3.808514e+05</td>\n",
       "      <td>6723.928582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albanie</th>\n",
       "      <td>1.301973e+04</td>\n",
       "      <td>4521.752219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algérie</th>\n",
       "      <td>1.700970e+05</td>\n",
       "      <td>4134.936054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Allemagne</th>\n",
       "      <td>3.690849e+06</td>\n",
       "      <td>44670.222288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Produit         Produit Intérieur Brut (en millions de $)  \\\n",
       "Zone                                                        \n",
       "Afghanistan                                  1.889635e+04   \n",
       "Afrique du Sud                               3.808514e+05   \n",
       "Albanie                                      1.301973e+04   \n",
       "Algérie                                      1.700970e+05   \n",
       "Allemagne                                    3.690849e+06   \n",
       "\n",
       "Produit         Produit Intérieur Brut par habitant  \n",
       "Zone                                                 \n",
       "Afghanistan                              530.149831  \n",
       "Afrique du Sud                          6723.928582  \n",
       "Albanie                                 4521.752219  \n",
       "Algérie                                 4134.936054  \n",
       "Allemagne                              44670.222288  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Pivoter la table PIB\n",
    "pivot_PIB= pd.pivot_table(PIB, index=['Zone'], columns=['Produit'], values= 'Valeur')\n",
    "pivot_PIB.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a79f261c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Produit</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zone</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>1.889635e+04</td>\n",
       "      <td>530.149831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Afrique du Sud</th>\n",
       "      <td>3.808514e+05</td>\n",
       "      <td>6723.928582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albanie</th>\n",
       "      <td>1.301973e+04</td>\n",
       "      <td>4521.752219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algérie</th>\n",
       "      <td>1.700970e+05</td>\n",
       "      <td>4134.936054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Allemagne</th>\n",
       "      <td>3.690849e+06</td>\n",
       "      <td>44670.222288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Produit         PIB (en millions)   PIB par hab\n",
       "Zone                                           \n",
       "Afghanistan          1.889635e+04    530.149831\n",
       "Afrique du Sud       3.808514e+05   6723.928582\n",
       "Albanie              1.301973e+04   4521.752219\n",
       "Algérie              1.700970e+05   4134.936054\n",
       "Allemagne            3.690849e+06  44670.222288"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Renommer les colonnes\n",
    "pivot_PIB.rename(columns={'Produit Intérieur Brut (en millions de $)': 'PIB (en millions)', 'Produit Intérieur Brut par habitant': 'PIB par hab'}, inplace=True)\n",
    "pivot_PIB.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "445ef0b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(210, 2)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot_PIB.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ae511748",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Produit\n",
       "PIB (en millions)    0\n",
       "PIB par hab          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# nombre de valeurs manquantes\n",
    "pivot_PIB.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a85459f1",
   "metadata": {},
   "source": [
    "# <u> III. Jointures des fichiers <a class=\"anchor\" id=\"jointure\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c8ce4a00",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>57009756.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2884169.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>41389189.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>82658409.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0     Afghanistan                      57.0           0.0          29.0   \n",
       "1  Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2         Albanie                      47.0           0.0          38.0   \n",
       "3         Algérie                     277.0           0.0           2.0   \n",
       "4       Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "   Production  Population  \n",
       "0        28.0  36296113.0  \n",
       "1      1667.0  57009756.0  \n",
       "2        13.0   2884169.0  \n",
       "3       275.0  41389189.0  \n",
       "4      1514.0  82658409.0  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Faire un merge de deux tables\n",
    "join1 = pd.merge(dispoalimpoulet, pop17, on='Zone', how='inner')\n",
    "join1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "62583e35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1997.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>57009756.0</td>\n",
       "      <td>2987.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2884169.0</td>\n",
       "      <td>3400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>41389189.0</td>\n",
       "      <td>3345.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>82658409.0</td>\n",
       "      <td>3559.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0     Afghanistan                      57.0           0.0          29.0   \n",
       "1  Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2         Albanie                      47.0           0.0          38.0   \n",
       "3         Algérie                     277.0           0.0           2.0   \n",
       "4       Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "   Production  Population  Disponibilité alimentaire (Kcal/personne/jour)  \n",
       "0        28.0  36296113.0                                          1997.0  \n",
       "1      1667.0  57009756.0                                          2987.0  \n",
       "2        13.0   2884169.0                                          3400.0  \n",
       "3       275.0  41389189.0                                          3345.0  \n",
       "4      1514.0  82658409.0                                          3559.0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Faire un merge de deux tables\n",
    "join2 = pd.merge(join1, somme_kcal, on='Zone', how='inner')\n",
    "join2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9a118c02",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>1.889635e+04</td>\n",
       "      <td>530.149831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>57009756.0</td>\n",
       "      <td>2987.0</td>\n",
       "      <td>3.808514e+05</td>\n",
       "      <td>6723.928582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2884169.0</td>\n",
       "      <td>3400.0</td>\n",
       "      <td>1.301973e+04</td>\n",
       "      <td>4521.752219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>41389189.0</td>\n",
       "      <td>3345.0</td>\n",
       "      <td>1.700970e+05</td>\n",
       "      <td>4134.936054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>82658409.0</td>\n",
       "      <td>3559.0</td>\n",
       "      <td>3.690849e+06</td>\n",
       "      <td>44670.222288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0     Afghanistan                      57.0           0.0          29.0   \n",
       "1  Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2         Albanie                      47.0           0.0          38.0   \n",
       "3         Algérie                     277.0           0.0           2.0   \n",
       "4       Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "   Production  Population  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0        28.0  36296113.0                                          1997.0   \n",
       "1      1667.0  57009756.0                                          2987.0   \n",
       "2        13.0   2884169.0                                          3400.0   \n",
       "3       275.0  41389189.0                                          3345.0   \n",
       "4      1514.0  82658409.0                                          3559.0   \n",
       "\n",
       "   PIB (en millions)   PIB par hab  \n",
       "0       1.889635e+04    530.149831  \n",
       "1       3.808514e+05   6723.928582  \n",
       "2       1.301973e+04   4521.752219  \n",
       "3       1.700970e+05   4134.936054  \n",
       "4       3.690849e+06  44670.222288  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Faire un merge de deux tables\n",
    "finaldf = pd.merge(join2, pivot_PIB, on='Zone', how='inner')\n",
    "finaldf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2da350b7",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(171, 9)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldf.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c58d3824",
   "metadata": {},
   "source": [
    "### On vérifie qu'il n'y ait pas de valeurs Nan et on les trait à travers le calcul de la moyenne"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "15f00e50",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Zone                                              0\n",
       "Disponibilité intérieure                          0\n",
       "Exportations                                      0\n",
       "Importations                                      0\n",
       "Production                                        0\n",
       "Population                                        0\n",
       "Disponibilité alimentaire (Kcal/personne/jour)    0\n",
       "PIB (en millions)                                 0\n",
       "PIB par hab                                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# % de valeurs manquantes\n",
    "finaldf.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4d00555",
   "metadata": {},
   "source": [
    "### Vérifier que toutes les colonnes sont en type Float64"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d99be2bf",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Zone                                               object\n",
       "Disponibilité intérieure                          float64\n",
       "Exportations                                      float64\n",
       "Importations                                      float64\n",
       "Production                                        float64\n",
       "Population                                        float64\n",
       "Disponibilité alimentaire (Kcal/personne/jour)    float64\n",
       "PIB (en millions)                                 float64\n",
       "PIB par hab                                       float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# types pour chaque colonne\n",
    "finaldf.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6f938a31",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#doublons\n",
    "finaldf.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "040ccf07",
   "metadata": {},
   "source": [
    "# <u> IV. Suppression des outliers <a class=\"anchor\" id=\"outliers\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd951942",
   "metadata": {},
   "source": [
    "## Nous allons classer certaines variables et créer des boxplot pour détecter les outliers et les supprimer de notre étude de cas\n",
    "### Variables à classer\n",
    "- [Population](#population)\n",
    "- [Disponiblité intérieure](#dispo)\n",
    "- [Exportations](#exportations)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ef329b5",
   "metadata": {},
   "source": [
    "### Population <a class=\"anchor\" id=\"population\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "088edf24",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Chine, continentale</td>\n",
       "      <td>18161.0</td>\n",
       "      <td>576.0</td>\n",
       "      <td>452.0</td>\n",
       "      <td>18236.0</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3197.0</td>\n",
       "      <td>1.231049e+07</td>\n",
       "      <td>8729.136932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Inde</td>\n",
       "      <td>3661.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3545.0</td>\n",
       "      <td>1.338677e+09</td>\n",
       "      <td>2515.0</td>\n",
       "      <td>2.624329e+06</td>\n",
       "      <td>1937.924543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>États-Unis d'Amérique</td>\n",
       "      <td>18266.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>21914.0</td>\n",
       "      <td>3.250848e+08</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>59059.596403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>Indonésie</td>\n",
       "      <td>2323.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2301.0</td>\n",
       "      <td>2.646510e+08</td>\n",
       "      <td>2894.0</td>\n",
       "      <td>1.015619e+06</td>\n",
       "      <td>3839.785074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>Pakistan</td>\n",
       "      <td>1282.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1281.0</td>\n",
       "      <td>2.079062e+08</td>\n",
       "      <td>2325.0</td>\n",
       "      <td>3.371368e+05</td>\n",
       "      <td>1558.080077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Grenade</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.108740e+05</td>\n",
       "      <td>2404.0</td>\n",
       "      <td>1.125686e+03</td>\n",
       "      <td>9309.267844</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Saint-Vincent-et-les Grenadines</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.098270e+05</td>\n",
       "      <td>2962.0</td>\n",
       "      <td>8.476185e+02</td>\n",
       "      <td>8030.568916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Antigua-et-Barbuda</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.542600e+04</td>\n",
       "      <td>2429.0</td>\n",
       "      <td>1.467978e+03</td>\n",
       "      <td>16110.556284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Dominique</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.145800e+04</td>\n",
       "      <td>2945.0</td>\n",
       "      <td>5.207000e+02</td>\n",
       "      <td>7395.991648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>Saint-Kitts-et-Nevis</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.204500e+04</td>\n",
       "      <td>2517.0</td>\n",
       "      <td>1.058944e+03</td>\n",
       "      <td>22160.603620</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>171 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Zone  Disponibilité intérieure  Exportations  \\\n",
       "33               Chine, continentale                   18161.0         576.0   \n",
       "65                              Inde                    3661.0           4.0   \n",
       "168            États-Unis d'Amérique                   18266.0        3692.0   \n",
       "66                         Indonésie                    2323.0           0.0   \n",
       "113                         Pakistan                    1282.0           4.0   \n",
       "..                               ...                       ...           ...   \n",
       "55                           Grenade                       8.0           0.0   \n",
       "133  Saint-Vincent-et-les Grenadines                       8.0           2.0   \n",
       "6                 Antigua-et-Barbuda                       7.0           0.0   \n",
       "43                         Dominique                       4.0           0.0   \n",
       "132             Saint-Kitts-et-Nevis                       4.0           0.0   \n",
       "\n",
       "     Importations  Production    Population  \\\n",
       "33          452.0     18236.0  1.421022e+09   \n",
       "65            0.0      3545.0  1.338677e+09   \n",
       "168         123.0     21914.0  3.250848e+08   \n",
       "66            1.0      2301.0  2.646510e+08   \n",
       "113           2.0      1281.0  2.079062e+08   \n",
       "..            ...         ...           ...   \n",
       "55            7.0         1.0  1.108740e+05   \n",
       "133           9.0         0.0  1.098270e+05   \n",
       "6             7.0         0.0  9.542600e+04   \n",
       "43            4.0         0.0  7.145800e+04   \n",
       "132           4.0         0.0  5.204500e+04   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  PIB (en millions)  \\\n",
       "33                                           3197.0       1.231049e+07   \n",
       "65                                           2515.0       2.624329e+06   \n",
       "168                                          3762.0       1.947734e+07   \n",
       "66                                           2894.0       1.015619e+06   \n",
       "113                                          2325.0       3.371368e+05   \n",
       "..                                              ...                ...   \n",
       "55                                           2404.0       1.125686e+03   \n",
       "133                                          2962.0       8.476185e+02   \n",
       "6                                            2429.0       1.467978e+03   \n",
       "43                                           2945.0       5.207000e+02   \n",
       "132                                          2517.0       1.058944e+03   \n",
       "\n",
       "      PIB par hab  \n",
       "33    8729.136932  \n",
       "65    1937.924543  \n",
       "168  59059.596403  \n",
       "66    3839.785074  \n",
       "113   1558.080077  \n",
       "..            ...  \n",
       "55    9309.267844  \n",
       "133   8030.568916  \n",
       "6    16110.556284  \n",
       "43    7395.991648  \n",
       "132  22160.603620  \n",
       "\n",
       "[171 rows x 9 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sort les individus par Population \n",
    "finaldf.sort_values(by = 'Population', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fc60637d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>1.710000e+02</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>1.710000e+02</td>\n",
       "      <td>171.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>678.982456</td>\n",
       "      <td>105.076023</td>\n",
       "      <td>88.064327</td>\n",
       "      <td>708.654971</td>\n",
       "      <td>4.295384e+07</td>\n",
       "      <td>2857.707602</td>\n",
       "      <td>4.670073e+05</td>\n",
       "      <td>13964.082129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2181.987404</td>\n",
       "      <td>459.210256</td>\n",
       "      <td>186.286880</td>\n",
       "      <td>2481.719692</td>\n",
       "      <td>1.535062e+08</td>\n",
       "      <td>455.789473</td>\n",
       "      <td>1.848920e+06</td>\n",
       "      <td>19255.100084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.204500e+04</td>\n",
       "      <td>1754.000000</td>\n",
       "      <td>1.881820e+02</td>\n",
       "      <td>414.740323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>28.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2.864792e+06</td>\n",
       "      <td>2513.500000</td>\n",
       "      <td>1.194253e+04</td>\n",
       "      <td>1942.606984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>98.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>9.729823e+06</td>\n",
       "      <td>2871.000000</td>\n",
       "      <td>4.417908e+04</td>\n",
       "      <td>5960.707147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>349.500000</td>\n",
       "      <td>16.500000</td>\n",
       "      <td>78.500000</td>\n",
       "      <td>350.500000</td>\n",
       "      <td>3.046071e+07</td>\n",
       "      <td>3250.500000</td>\n",
       "      <td>2.358560e+05</td>\n",
       "      <td>17013.948466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>18266.000000</td>\n",
       "      <td>4223.000000</td>\n",
       "      <td>1069.000000</td>\n",
       "      <td>21914.000000</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3770.000000</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>110203.008202</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Disponibilité intérieure  Exportations  Importations    Production  \\\n",
       "count                171.000000    171.000000    171.000000    171.000000   \n",
       "mean                 678.982456    105.076023     88.064327    708.654971   \n",
       "std                 2181.987404    459.210256    186.286880   2481.719692   \n",
       "min                    0.000000     -7.000000      0.000000      0.000000   \n",
       "25%                   28.500000      0.000000      3.000000     11.000000   \n",
       "50%                   98.000000      1.000000     16.000000     65.000000   \n",
       "75%                  349.500000     16.500000     78.500000    350.500000   \n",
       "max                18266.000000   4223.000000   1069.000000  21914.000000   \n",
       "\n",
       "         Population  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "count  1.710000e+02                                      171.000000   \n",
       "mean   4.295384e+07                                     2857.707602   \n",
       "std    1.535062e+08                                      455.789473   \n",
       "min    5.204500e+04                                     1754.000000   \n",
       "25%    2.864792e+06                                     2513.500000   \n",
       "50%    9.729823e+06                                     2871.000000   \n",
       "75%    3.046071e+07                                     3250.500000   \n",
       "max    1.421022e+09                                     3770.000000   \n",
       "\n",
       "       PIB (en millions)    PIB par hab  \n",
       "count       1.710000e+02     171.000000  \n",
       "mean        4.670073e+05   13964.082129  \n",
       "std         1.848920e+06   19255.100084  \n",
       "min         1.881820e+02     414.740323  \n",
       "25%         1.194253e+04    1942.606984  \n",
       "50%         4.417908e+04    5960.707147  \n",
       "75%         2.358560e+05   17013.948466  \n",
       "max         1.947734e+07  110203.008202  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Représentation en boîte à moustache des valeurs de la colonne 'Population'\n",
    "plt.figure(figsize= (8, 5))\n",
    "finaldf.boxplot(column='Population', vert = False, widths=0.5)\n",
    "plt.grid(False)\n",
    "plt.title(\"Représentation de la distribution des populations\")\n",
    "plt.show()\n",
    "\n",
    "# Données descriptives de la colonne population\n",
    "finaldf.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "a7a220b1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Chine, continentale</td>\n",
       "      <td>18161.0</td>\n",
       "      <td>576.0</td>\n",
       "      <td>452.0</td>\n",
       "      <td>18236.0</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3197.0</td>\n",
       "      <td>1.231049e+07</td>\n",
       "      <td>8729.136932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Inde</td>\n",
       "      <td>3661.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3545.0</td>\n",
       "      <td>1.338677e+09</td>\n",
       "      <td>2515.0</td>\n",
       "      <td>2.624329e+06</td>\n",
       "      <td>1937.924543</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "33  Chine, continentale                   18161.0         576.0         452.0   \n",
       "65                 Inde                    3661.0           4.0           0.0   \n",
       "\n",
       "    Production    Population  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "33     18236.0  1.421022e+09                                          3197.0   \n",
       "65      3545.0  1.338677e+09                                          2515.0   \n",
       "\n",
       "    PIB (en millions)  PIB par hab  \n",
       "33       1.231049e+07  8729.136932  \n",
       "65       2.624329e+06  1937.924543  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On affiche les pays avec des populations supérieures à 1 milliard\n",
    "finaldf.loc[finaldf[\"Population\"] > 1000000000]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec2d0646",
   "metadata": {},
   "source": [
    "#### La Chine et l'Inde sont des outliers avec une population supérieur à un milliard"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eaf3044",
   "metadata": {},
   "source": [
    "### Disponiblité Intérieure <a class=\"anchor\" id=\"dispo\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d36b0735",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>États-Unis d'Amérique</td>\n",
       "      <td>18266.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>21914.0</td>\n",
       "      <td>3.250848e+08</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>59059.596403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Chine, continentale</td>\n",
       "      <td>18161.0</td>\n",
       "      <td>576.0</td>\n",
       "      <td>452.0</td>\n",
       "      <td>18236.0</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3197.0</td>\n",
       "      <td>1.231049e+07</td>\n",
       "      <td>8729.136932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Brésil</td>\n",
       "      <td>9982.0</td>\n",
       "      <td>4223.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>14201.0</td>\n",
       "      <td>2.078338e+08</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>2.063515e+06</td>\n",
       "      <td>9896.717512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Fédération de Russie</td>\n",
       "      <td>4556.0</td>\n",
       "      <td>115.0</td>\n",
       "      <td>226.0</td>\n",
       "      <td>4444.0</td>\n",
       "      <td>1.455301e+08</td>\n",
       "      <td>3362.0</td>\n",
       "      <td>1.574199e+06</td>\n",
       "      <td>10822.770247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Inde</td>\n",
       "      <td>3661.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3545.0</td>\n",
       "      <td>1.338677e+09</td>\n",
       "      <td>2515.0</td>\n",
       "      <td>2.624329e+06</td>\n",
       "      <td>1937.924543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Dominique</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.145800e+04</td>\n",
       "      <td>2945.0</td>\n",
       "      <td>5.207000e+02</td>\n",
       "      <td>7395.991648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129</th>\n",
       "      <td>République démocratique populaire lao</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.953035e+06</td>\n",
       "      <td>3044.0</td>\n",
       "      <td>1.707116e+04</td>\n",
       "      <td>2439.462411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>Saint-Kitts-et-Nevis</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.204500e+04</td>\n",
       "      <td>2517.0</td>\n",
       "      <td>1.058944e+03</td>\n",
       "      <td>22160.603620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>133</th>\n",
       "      <td>Saint-Vincent-et-les Grenadines</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.098270e+05</td>\n",
       "      <td>2962.0</td>\n",
       "      <td>8.476185e+02</td>\n",
       "      <td>8030.568916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>Îles Salomon</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.360390e+05</td>\n",
       "      <td>2410.0</td>\n",
       "      <td>1.469790e+03</td>\n",
       "      <td>2283.581124</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>171 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      Zone  Disponibilité intérieure  \\\n",
       "168                  États-Unis d'Amérique                   18266.0   \n",
       "33                     Chine, continentale                   18161.0   \n",
       "21                                  Brésil                    9982.0   \n",
       "51                    Fédération de Russie                    4556.0   \n",
       "65                                    Inde                    3661.0   \n",
       "..                                     ...                       ...   \n",
       "43                               Dominique                       4.0   \n",
       "129  République démocratique populaire lao                       0.0   \n",
       "132                   Saint-Kitts-et-Nevis                       4.0   \n",
       "133        Saint-Vincent-et-les Grenadines                       8.0   \n",
       "170                           Îles Salomon                       3.0   \n",
       "\n",
       "     Exportations  Importations  Production    Population  \\\n",
       "168        3692.0         123.0     21914.0  3.250848e+08   \n",
       "33          576.0         452.0     18236.0  1.421022e+09   \n",
       "21         4223.0           3.0     14201.0  2.078338e+08   \n",
       "51          115.0         226.0      4444.0  1.455301e+08   \n",
       "65            4.0           0.0      3545.0  1.338677e+09   \n",
       "..            ...           ...         ...           ...   \n",
       "43            0.0           4.0         0.0  7.145800e+04   \n",
       "129           0.0           0.0         0.0  6.953035e+06   \n",
       "132           0.0           4.0         0.0  5.204500e+04   \n",
       "133           2.0           9.0         0.0  1.098270e+05   \n",
       "170           0.0           6.0         0.0  6.360390e+05   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  PIB (en millions)  \\\n",
       "168                                          3762.0       1.947734e+07   \n",
       "33                                           3197.0       1.231049e+07   \n",
       "21                                           3250.0       2.063515e+06   \n",
       "51                                           3362.0       1.574199e+06   \n",
       "65                                           2515.0       2.624329e+06   \n",
       "..                                              ...                ...   \n",
       "43                                           2945.0       5.207000e+02   \n",
       "129                                          3044.0       1.707116e+04   \n",
       "132                                          2517.0       1.058944e+03   \n",
       "133                                          2962.0       8.476185e+02   \n",
       "170                                          2410.0       1.469790e+03   \n",
       "\n",
       "      PIB par hab  \n",
       "168  59059.596403  \n",
       "33    8729.136932  \n",
       "21    9896.717512  \n",
       "51   10822.770247  \n",
       "65    1937.924543  \n",
       "..            ...  \n",
       "43    7395.991648  \n",
       "129   2439.462411  \n",
       "132  22160.603620  \n",
       "133   8030.568916  \n",
       "170   2283.581124  \n",
       "\n",
       "[171 rows x 9 columns]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Sort les individus par Production \n",
    "finaldf.sort_values(by = 'Production', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7847191f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkUAAAE/CAYAAABIL7f7AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAg0ElEQVR4nO3deZxcZZ3v8c+vk6YbQiSETdYkKGroeEWJOzooKCogruB23XV0blAHVEBGBWZUUON4cbkZdQRFExl3BRfUFjVuyL6ICGhYZA2CLBISwu/+cZ7qnK5UV3cnFbqr/bxfr3rl1Fme8zxnq2+d81QnMhNJkqR/dD0TXQFJkqTJwFAkSZKEoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKpLYi4tCI+FFE9E90XUYTEUsi4r0Pwnr2jYjrN3DZUyPiPzpUj6GyIuJpEXFFJ8ot5X0/Il5Thl8bEcs7WPYrI+KsTpU3yroyIh7+YKyrab1D228iRMR7IuJzZXhu2Q7TxzvveNoREZ9ud2x3cr+Ptq4yT0fPiX8ULQ8SabKJiBXADsBa4G7gB8CizLx7E67zscAbgBdk5qpNtZ6yrlOB6zPz38Y4/2uBN2bmPo1xmfmWTVO7yS8zfwE8crT5IuI44OGZ+apRyntuJ+oVEXOBPwO9mXl/KfvLwJc7Uf5EiIgE/g4kcB9wIfCZzDy9MU+ntt+GyswPdmLeejtanXO1aW8G7mt3/o5nv2/susr6xnROaDhDkbrJwZn544h4KPBD4Bjg2E6uICKm1z68LgAO6GT5mtwiIoDIzAcmui6T3GMy86qI2BZ4LvDJiHhUZh4/0RWbCJn5mcm0rvp1rNM2ZdmTgY/P1HUy8yaqULRXY1xEPCkifhURd0TERRGxb23a2RHxoYg4JyL+FhHfjojZZVrjdvkbIuJaYLCMf31EXB4Rt0fEDyNiThkfEfGfEXFLKeviiFhQpvVFxEcj4tqIuLk8ztq8TNs3Iq6PiCPLsjdGxOvKtDcDrwTeHRF3R8R3y/ijI+LqiLgrIn4fES8s4+cDS4Anl/nvKOOHPZqKiDdFxFUR8deI+E5E7FSblhHxloi4srTxUyUQrCciNi9l3x4Rvwce3zR9p4j4ekTcGhF/joi3jWU/RsTWEXFGWe72MrxLm/kfGxHnl+1xOtBfmzbskV5EHBURfynzXhER+0XEc4D3AIeV7XZRmffsiPhARPyS6g7I7mXcG4evPj5R9vkfImK/2oQVEbF/7f1xEfGl8vbn5d87yjqfHE2P4yLiKRHxu1L27yLiKbVpZ0fEv0fEL0tbzooqiIy0jd5Vjq0bIuL1TdPaHZ/blu1/RzlefhERo34+ZObKzDwNeCtwTERsU6v3G8vwwyPiZ6V9K8u+a9QpI+JtEfGnMu0jjfVGRE9E/FtEXFPOmS9GxFZlWuO8fU1pz8qIOLZWbn0fNLy+bJcbI+LIUeatb/83xsjn3IjbtEVZzfu95Tm4IeuKddeXoyLiJuCUFufEiOdprH/taF52RSn7YuCeiJgeba653cxQpK4T1Qfnc4GryvudgTOB/wBmA+8Evh4R29UWezXwemAn4H7g5KZi/wmYDxwQES+g+vB8EbAd8AtgWZnv2cDTgUcAs4DDgNvKtJPK+L2AhwM7A++rreOhwFZl/BuAT0XE1uWb35eBD2fmlpl5cJn/auBpZZnjgS9FxI6ZeTnwFuDXZf5ZLbbRM4EPAYcCOwLXAF9pmu0gqoDzmDLfSHfF3g88rLwOAIb6WJQPsO8CF5V27Qe8IyLGcoetBzgFmAPsBtwLfLLVjBGxGfAt4DSqffxV4MUjzPtIYBHw+MycWeq8IjN/AHwQOL1st8fUFvvfwJuBmVTbqtkTgT8B21Jtj29ECdajeHr5d1ZZ56+b6jqb6tg9GdgG+BhwZiNcFK8AXgdsD2xGdXy3avdzyrRnAXsA+zfN0u74PBK4nup434Hq+B/P/wH1baonD09oMe3fgbOArYFdgE80TX8hsBB4HHAI1XkK8NryegawO7Al6x8f+1A9ItoPeF8JFCN5BtV2eTZwdNSC7GjanHOjnfOjWe8c3Ih1PZTq3JhDdSwP2cjztOHlwIFU170dGP2a25UMReom34qIu4DrgFuoPpwAXgV8LzO/l5kPZOaPgHOB59WWPS0zL83Me4D3AodGxLTa9OMy857MvBf4Z+BDmXl5uU38QWCvqO4WraH64HwU1WOWyzPzxogI4E3Av2bmXzPzrrLcy2rrWAOckJlrMvN7VH2jRnzmn5lfzcwbSptOB66k9YdOK68EPp+Z52fmfVSPGp8cVR+XhhMz847MvBb4KbU7b00OBT5Q2nUdwwPl44HtMvOEzFydmX8CPtvU7pHad1tmfj0z/1621weowmkrTwJ6gY+X7fc14HcjzLsW6AP2jIjezFyRmVePUp1TM/OyzLw/M9e0mH5Lbd2nA1dQfUBsrAOBKzPztLLuZcAfgINr85ySmX8sx+b/0H4/nVI7zo9rTBjD8bmGKjzPKW38RY7jP8Ys22wl1QdkszVUH9Q7ZeaqzGzutH5SqdO1wMepPnyhOoY/lpl/Kn0HjwFeFsM7TB+fmfdm5kVUH/j1oNvs+HKOX0IVxl/eZt5RjfGcH82YzsExrusB4P2ZeV85Vuo2+DytOTkzrytlj+Wa25UMReomLyjf/PelCiWNxwhzgJeW27h3lNvN+1Bd5Buuqw1fQ/UBu+0I0+cA/7dW1l+BAHbOzEGqb6ufAm6OiM9ExEOovmFvAZxXW+4HZXzDbU3P4v9O9e23pYh4dURcWCtvQVOd29mJ2h2P8qFyG9W3xIabxliXnVh/+zXMAXZq2vbvofom2VZEbBER/1Uej9xJ9ahpVlNYrdfhL00f1K3u6JCZVwHvoAoFt0TEV6L26HAE140yvdW6RytzLIbtp1rZnd5Pox2fH6G683pWVI+yjh5PIyKit5T11xaT3011/pwTEZdF02O9FnVubNfmbXMN1d2o+rE11m3Tbj0baizn/GjGWv+xrOvWHPkHIRt8ntY0XyNHu+Z2JUORuk5m/gw4FfhoGXUd1Z2gWbXXjMw8sbbYrrXh3ai+va6sF1sbvg7456byNs/MX5X1n5yZewMDVLez31XKuhcYqC2zVWa2u0gPa1b9Tbkr9Vmqx0DblFvol1J9uKw3fws3UF24GuXNoHo885cx1qfuRtbffg3XAX9u2lYzM3Ms3xiPpLpT9sTMfAjrHjW16tt0I7Bz+cbcqh7DZObSrH65M4dqW53UmDTSIqPUtdW6byjD91B9YDU8dBzlDttPtbI7vZ/aHp+ZeVdmHpmZu1PdpToiav2mxuAQqsfS5zRPyMybMvNNmbkT1V3YT8fwPxPQXOfGdm3eNruVddw8jnrVjbSesWrelxt7znd6Xe2OtdHO03bHcKvyx3LN7UqGInWrjwPPioi9gC8BB0fEARExLSL6S0fBeqfdV0XEnhGxBXAC8LXMXDtC2UuoOo0OAETEVhHx0jL8+Ih4YvlmfA+wClib1a+VPgv8Z0RsX+bdeRzP7G+m6jfRMIPqInRrKet1VHeK6vPvUvratLIUeF1E7BURfVS32n+bmSvGWJ+6/6HaHluXbXp4bdo5wJ2lE+bmZfsviIjHty5qmJlUF/o7St+a97eZ99dUH4hvK508X8QIjxIj4pER8czS7lVlHY19fTMwN8bQibjJ9mXdveVYmA98r0y7kOqxTm9ELAReUlvuVqrHGvV9W/c94BER8YrSrsOAPYEzxlk/qPbTa2vH+dD2HO34jIiDouoQHcCdVNtrpPNjSETMjohXUt05PSkzb2sxz0tr5+LtVMd1vex3lWNrV+DtQKMj9jLgXyNiXkRsybr+YBv6y6f3lruTA1R9tE4fbYEmw865DpzzD+a6RjtPLwSeV/bnQ6nutLYzlmtuVzIUqStl5q3AF4H3ZtXP5RCq28G3Un2LeRfDj+/TqO4u3UT1q6URfyGVmd+kurPwlfJY51Kqjt0AD6G6ON1OdQv+NtbdsTqK6hHEb8pyP2bsfyfkv6n6wNwREd/KzN8Di6nCwM3Ao4Ff1uYfBC4DboqIlc2FZeZPqPpOfZ3qDsLDGF//gbrjqdr6Z6oOs6fV1rOW6s7CXmX6SuBzVJ3DR/NxYPOyzG+oHge0lJmrqTq+v5Zq2x8GfGOE2fuAE0u5N1EFmveUaV8t/94WEeePoY4Nv6XqpLuSqu/TS2oB4L1U2/d2qm21tFbvv5f5f1n27ZOa2nUbVWfbI6mOpXcDB2Xmevt0NJn5faptOkh1HA42zdLu+NyjvL+b6pj7dGae3WZ1F0XE3aW8N1L1dRmpg/Hjgd+W+b8DvD0z/1yb/m3gPKoP5jOpzgWAz1Mdaz+nOrZWMTyQj9fPSn1/Anw0M8f7hxRbnXMbc84/aOsaw3l6GlWfrBVU53jbwDjGa25XinH0pZO6UkScDXwpMz830XWRtE5Ufwhyj9IPTJpwXZ/qJEmSOsFQJEmShI/PJEmSAO8USZIkAYYiSZIkoPrroPoHtu222+bcuXMnuhqSJD1ozjvvvJWZud5fHzcU/YObO3cu55577kRXQ5KkB01EtPxvgnx8JkmShKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJgOkTXQFNPY85/iz+du8aZs4/mrsuP3HYtK027+Wi9z97gmomSdLIDEXquL/du4YVJx7Io79wNCtOPHDYtLlHnzlBtZIkqT0fn0mSJGEokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkTaBa046aKOWj4gO1USSpLEzFEmSJGEokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBQNiYiBiDh4E5Q7PSIWRURfp8uWJEmdM2ooioi1EXFhRFwWERdFxBER0VOmLYyIkzd9NSEi3hIRry7DZ0fEwhbzPD8iji7Dx0XEO8vwCRGxfxl+R0Rs0bTcbsCxwM9GWPfQ8m3qt29EPKVpXAAfBy7OzPtGWO5B24aSJGlkY7lTdG9m7pWZA8CzgOcB7wfIzHMz822bsoINmbkkM784yjzfycwTW4x/X2b+uLx9B7BF0/RrM/MVmXnnCOXWlx/JvsCwUJSVRZn581YLRMT0Tm7DiJjWiXImg8MPP5z+/n4igt7eXrbZZhumTZvGrrvuOjS+/tpyyy3p7e1db3zza5tttmHZsmUsW7aMBQsWMG3aNBYsWMDhhx/OggULiAh6enqG/dvf309PTw8LFixg2bJlm7TdzfUabX2jzT/e8tRd3L+aihrHdU9Pz4N6/QUgM9u+gLub3u8O3AYEVRA4o4z/J+DC8roAmFmm/xz4JvB7YAnQU+Z/OXAJcClwUn19wAeAi4DfADuU8ccB7yzDZ1PdgflVWf4JZfxrgU+2mP9U4CXA24DVZb0/LdOeDfwaOB/4KrBli21wKvCSMrwCOL7MfwnwKGAucBPwl9L+pwHbAV8HfldeT63V6zPAWcDSpm04A/h8mf8C4JDmdpX3ZwD71rbXCcBvgX2AVwHnlHr8FzCt3f7de++9s9MoeXDBqQvWmzbnqDPGtPz06dNz8eLFecopp+Ts2bOzp6cn999//9xss80SyN7e3pw1a1b29/cnkED29PQkkHvsscfQuMb4GTNmJJARkf39/bnddtvl4OBgrl69Oo899ticPn16Lly4MKdPn5777bdf9vT05MDAQAL51Kc+NefOnZvHHntszps3L5cuXdrxbZaZuXTp0pw3b95QvQYHB9uub7T5x1ueuov7V1NR47huXG8XL168Sa6/wLnZKvO0Gpk5cigq424Hdmj6QP9u7YN/S2B6mb6KKkhNA35UwslOwLUlOEwHBoEXlGUTOLgMfxj4t2wdij5bhp8OXJpjCEW5LtRsW4a3pQptM8r7o4D3tWhv8/KHl+F/AT7XvL7yfimwTxneDbi8Nt95wOblfX0bfhB4VRmeBfyRKigNtSvXD0UJHFqG55f90Fvefxp4dbv9O1lD0eLFizMzc2BgIAcHB3Px4sUZEQnkzJkzs7e3NwcHB3NwcHBYANp6661zYGBgKCA1QtPg4GDusMMOOW3atARy7ty5Q+sbGBgYKn/x4sVD7/v6+vKtb31r9vX15eDg4FBdBgYGOrSlhmuUX9dufaPNP97y1F3cv5qK6tfZxvG9Ka6/jBCKopo2soi4OzO3bBp3B/DI8iH8zsw8qPTleSHwZeAbmXl9ROwLnJCZTy/LvR74X8BPgRdnZqOP0BuAgcw8IiLuA/ozMyPiMOBZmfnGiDiOKqB9NCLOLuUOluWvLeW+AFiYmYua5j+1BI+vRcSKMs/KiDiIKvBcX5q2GfDrzHxDU3ubl39qZv4lIp4IfCAz96+vryxzC3BDrZjtqO4qHVlCw/Flvn1r2/BcoB+4vywzGzgAeGKjXWWZM4CPZubZEXE/0JeZayNiEfAe4Jay/ObAssw8rqk9bwbeDLDbbrvtfc0119BJEUFm8ugvPJpLXnPJsGlzjz5z1OWvOekg7rnnHrbYYgumTZvGqlWrWLNmDTNmzACgp6eHBx54gNWrVwOw2WabDVu+Mb1u9erV9PX1NUIlETE0z7Rp07jrrruYMWMG99xzDzNnzhx6f8cddzBr1ixWr15Nf38/q1ator+/n7Vr127Yxmmj0dbe3t6hcWvWrBlxfaPNP97y1F3cv5qKGsd143rb29s7dFx38vobEedl5np9k6dvQEG7A2upPnjnN8Zn5okRcSZVn6Pf1DomN6eupHr0NpI1uS6prW1Tx1bljlcAP8rMl49zuUan6Xb16wGenJn3DlthBMA9berz4sy8ommZvRne/6u/NrwqMxtHSABfyMxj2lU+Mz9D9QiPhQsXbsh22ygrTjyw7fQ4CZYsWcIRRxzB/PnzWb58ORdccMFQ2JoxYwarVq1i+fLl6y279dZbs9NOO3H55ZfzwAMPDJ1Iy5cvZ/vtt2flypWsXbuWOXPmDC0zf/58lixZQkSwZMmSofd9fX0cc8wx9PX1sXz58qG6zJ8/f731dkKj/Gc84xlD49qtb7T5x1ueuov7V1NR/TrbOL4fjOvvkFa3j+ovao/PqO52nAUcn+s/+nlYbb5vUd212Re4F5hH9aH+Q+DFwI7ANVSPr6YBP2Zd/5n6+l4CnJqtH58tKcP7AJfk2B+fXQLMq7XnWuDh5f0WwCNabIP68itY9/htIXB2GT6ysV1y3eOzd9Xe79Vcrxbb8IPAJ2HoDt5ja238VdmGuwJ3UutTVCtrT+BKYPvyfjYwp93+nayPz+xTZJ8itef+1VTUDX2K1lJ12r2MqvPzO1nXWbr+gf4Jqk7PFwHLgL4yfRA4nfU7Wr+CdR2tP1xb31hD0YcYZ0frMnw48AfWdbR+JlXH5ovL6/kttkF9+RW0DkWPKMtfSNXRetvS7osbbW+uV4ttuDlV5+jGdmmMD6rHkpeVMs+mRSgq7w8rdbiYqu/Sk9rt38kaihYtWpR9fX1DAakRjHbZZZeh8fXXjBkzcvr06euNb37Nnj07ly5dmkuXLh3qezQwMJCLFi0aCkGNvkuNf/v6+jIicmBgYJN/4DTXa7T1jTb/eMtTd3H/aipqHNcRscmuv2xon6KNUe8vs8lWoo2ycOHCPPfcczta5mh9ikZ9fFaWlyRpUxipT5F/0VqSJIkN6Gg9Hpl5NtWjHkmSpEnNO0WSJEkYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxFkiRJgKFIkiQJMBRJkiQBhiJJkiTAUCRJkgQYiiRJkgBDkSRJEmAokiRJAgxF2gTmHHXGRi2fmR2qiSRJY2cokiRJwlAkSZIEGIokSZIAQ5EkSRJgKJIkSQIMRZIkSYChSJIkCTAUSZIkAYYiSZIkwFAkSZIEGIokSZIAQ5EkSRJgKJIkSQIMRZIkSYChSJIkCTAUSZIkAYYiSZIkwFAkSZIEGIokSZIAQ5EkSRJgKJIkSQIMRZIkSYChSJIkCTAUSZIkAYYiSZIkwFAkSZIEGIokSZIAQ5EkSRJgKJIkSQIMRZIkSYChSJIkCTAUSZIkATB9oiugqWnu0Wcyc371b91Wm/dOUI0kSWrPUKSOW3HigWXowLbzSZI0mfj4TJIkCUORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSYCiSJEkCDEWSJEmAoUiSJAkwFEmSJAGGIkmSJMBQJEmSBBiKJEmSAEORJEkSAJGZE10HTaCIuBW4psPFbgus7HCZk8VUbhtM7fZN5bbB1G7fVG4bTO32Tda2zcnM7ZpHGorUcRFxbmYunOh6bApTuW0wtds3ldsGU7t9U7ltMLXb121t8/GZJEkShiJJkiTAUKRN4zMTXYFNaCq3DaZ2+6Zy22Bqt28qtw2mdvu6qm32KZIkScI7RZIkSYChSB0UEc+JiCsi4qqIOHqi6zMWEbFrRPw0Ii6PiMsi4u1l/HER8ZeIuLC8nldb5pjSxisi4oDa+L0j4pIy7eSIiIloU7OIWFHqdWFEnFvGzY6IH0XEleXfrWvzd0X7IuKRtf1zYUTcGRHv6OZ9FxGfj4hbIuLS2riO7auI6IuI08v430bE3EnQvo9ExB8i4uKI+GZEzCrj50bEvbX9uGQyt2+EtnXsWJyk++70WttWRMSFZXxX7bthMtOXr41+AdOAq4Hdgc2Ai4A9J7peY6j3jsDjyvBM4I/AnsBxwDtbzL9naVsfMK+0eVqZdg7wZCCA7wPPnej2lXqtALZtGvdh4OgyfDRwUre2r3b83QTM6eZ9BzwdeBxw6abYV8C/AEvK8MuA0ydB+54NTC/DJ9XaN7c+X1M5k659I7StY8fiZNx3TdMXA+/rxn1Xf3mnSJ3yBOCqzPxTZq4GvgIcMsF1GlVm3piZ55fhu4DLgZ3bLHII8JXMvC8z/wxcBTwhInYEHpKZv87qrP4i8IJNW/uNcgjwhTL8BdbVtVvbtx9wdWa2+0Okk75tmflz4K9Nozu5r+plfQ3Y78G8K9aqfZl5VmbeX97+BtilXRmTtX0j7LuRTIl911DqcSiwrF0Zk7l9DYYidcrOwHW199fTPlxMOuV27WOB35ZRi8ot/c/XHlmM1M6dy3Dz+MkggbMi4ryIeHMZt0Nm3ghVMAS2L+O7sX1QfbOsX5Cnyr6Dzu6roWVKEPkbsM0mq/n4vZ7q7kHDvIi4ICJ+FhFPK+O6rX2dOhYnY9sangbcnJlX1sZ15b4zFKlTWiX6rvlpY0RsCXwdeEdm3gn8P+BhwF7AjVS3hmHkdk7m9j81Mx8HPBf4PxHx9Dbzdl37ImIz4PnAV8uoqbTv2tmQ9kzatkbEscD9wJfLqBuB3TLzscARwNKIeAjd1b5OHouTrW11L2f4l5Ku3XeGInXK9cCutfe7ADdMUF3GJSJ6qQLRlzPzGwCZeXNmrs3MB4DPUj0ehJHbeT3Db/tPmvZn5g3l31uAb1K15eZyK7txS/uWMnvXtY8q7J2fmTfD1Np3RSf31dAyETEd2IqxP/LZZCLiNcBBwCvLYxXKo6XbyvB5VP1uHkEXta/Dx+KkaltDqcuLgNMb47p53xmK1Cm/A/aIiHnlm/vLgO9McJ1GVZ5Z/zdweWZ+rDZ+x9psLwQav7j4DvCy8kuJecAewDnlscZdEfGkUuargW8/KI1oIyJmRMTMxjBVp9ZLqdrxmjLba1hX165qXzHsW+pU2Xc1ndxX9bJeAgw2QshEiYjnAEcBz8/Mv9fGbxcR08rw7lTt+1M3ta/Dx+KkalvN/sAfMnPosVhX77uJ6N3ta2q+gOdR/XrrauDYia7PGOu8D9Ut2ouBC8vrecBpwCVl/HeAHWvLHFvaeAW1XykBC6kuelcDn6T8cdQJbt/uVL9yuQi4rLFfqJ7V/wS4svw7u0vbtwVwG7BVbVzX7juqcHcjsIbqm/MbOrmvgH6qx4xXUf0KaPdJ0L6rqPqSNM6/xi+QXlyO2YuA84GDJ3P7Rmhbx47FybjvyvhTgbc0zdtV+67+8i9aS5Ik4eMzSZIkwFAkSZIEGIokSZIAQ5EkSRJgKJIkSQIMRZIkSYChSJIkCTAUSZIkAfD/ARhJ6nUyxsMWAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>1.710000e+02</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>1.710000e+02</td>\n",
       "      <td>171.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>678.982456</td>\n",
       "      <td>105.076023</td>\n",
       "      <td>88.064327</td>\n",
       "      <td>708.654971</td>\n",
       "      <td>4.295384e+07</td>\n",
       "      <td>2857.707602</td>\n",
       "      <td>4.670073e+05</td>\n",
       "      <td>13964.082129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2181.987404</td>\n",
       "      <td>459.210256</td>\n",
       "      <td>186.286880</td>\n",
       "      <td>2481.719692</td>\n",
       "      <td>1.535062e+08</td>\n",
       "      <td>455.789473</td>\n",
       "      <td>1.848920e+06</td>\n",
       "      <td>19255.100084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.204500e+04</td>\n",
       "      <td>1754.000000</td>\n",
       "      <td>1.881820e+02</td>\n",
       "      <td>414.740323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>28.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2.864792e+06</td>\n",
       "      <td>2513.500000</td>\n",
       "      <td>1.194253e+04</td>\n",
       "      <td>1942.606984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>98.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>9.729823e+06</td>\n",
       "      <td>2871.000000</td>\n",
       "      <td>4.417908e+04</td>\n",
       "      <td>5960.707147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>349.500000</td>\n",
       "      <td>16.500000</td>\n",
       "      <td>78.500000</td>\n",
       "      <td>350.500000</td>\n",
       "      <td>3.046071e+07</td>\n",
       "      <td>3250.500000</td>\n",
       "      <td>2.358560e+05</td>\n",
       "      <td>17013.948466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>18266.000000</td>\n",
       "      <td>4223.000000</td>\n",
       "      <td>1069.000000</td>\n",
       "      <td>21914.000000</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3770.000000</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>110203.008202</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Disponibilité intérieure  Exportations  Importations    Production  \\\n",
       "count                171.000000    171.000000    171.000000    171.000000   \n",
       "mean                 678.982456    105.076023     88.064327    708.654971   \n",
       "std                 2181.987404    459.210256    186.286880   2481.719692   \n",
       "min                    0.000000     -7.000000      0.000000      0.000000   \n",
       "25%                   28.500000      0.000000      3.000000     11.000000   \n",
       "50%                   98.000000      1.000000     16.000000     65.000000   \n",
       "75%                  349.500000     16.500000     78.500000    350.500000   \n",
       "max                18266.000000   4223.000000   1069.000000  21914.000000   \n",
       "\n",
       "         Population  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "count  1.710000e+02                                      171.000000   \n",
       "mean   4.295384e+07                                     2857.707602   \n",
       "std    1.535062e+08                                      455.789473   \n",
       "min    5.204500e+04                                     1754.000000   \n",
       "25%    2.864792e+06                                     2513.500000   \n",
       "50%    9.729823e+06                                     2871.000000   \n",
       "75%    3.046071e+07                                     3250.500000   \n",
       "max    1.421022e+09                                     3770.000000   \n",
       "\n",
       "       PIB (en millions)    PIB par hab  \n",
       "count       1.710000e+02     171.000000  \n",
       "mean        4.670073e+05   13964.082129  \n",
       "std         1.848920e+06   19255.100084  \n",
       "min         1.881820e+02     414.740323  \n",
       "25%         1.194253e+04    1942.606984  \n",
       "50%         4.417908e+04    5960.707147  \n",
       "75%         2.358560e+05   17013.948466  \n",
       "max         1.947734e+07  110203.008202  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Représentation en boîte à moustache des valeurs de la colonne 'Disponibilité intérieure'\n",
    "plt.figure(figsize= (8, 5))\n",
    "finaldf.boxplot(column='Disponibilité intérieure', vert = False, widths=0.5)\n",
    "plt.grid(False)\n",
    "plt.title(\"Représentation de la distribution des Disponibilité intérieure\")\n",
    "plt.show()\n",
    "\n",
    "finaldf.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "164f0192",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Brésil</td>\n",
       "      <td>9982.0</td>\n",
       "      <td>4223.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>14201.0</td>\n",
       "      <td>2.078338e+08</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>2.063515e+06</td>\n",
       "      <td>9896.717512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Chine, continentale</td>\n",
       "      <td>18161.0</td>\n",
       "      <td>576.0</td>\n",
       "      <td>452.0</td>\n",
       "      <td>18236.0</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3197.0</td>\n",
       "      <td>1.231049e+07</td>\n",
       "      <td>8729.136932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>États-Unis d'Amérique</td>\n",
       "      <td>18266.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>21914.0</td>\n",
       "      <td>3.250848e+08</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>59059.596403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Zone  Disponibilité intérieure  Exportations  \\\n",
       "21                  Brésil                    9982.0        4223.0   \n",
       "33     Chine, continentale                   18161.0         576.0   \n",
       "168  États-Unis d'Amérique                   18266.0        3692.0   \n",
       "\n",
       "     Importations  Production    Population  \\\n",
       "21            3.0     14201.0  2.078338e+08   \n",
       "33          452.0     18236.0  1.421022e+09   \n",
       "168         123.0     21914.0  3.250848e+08   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  PIB (en millions)  \\\n",
       "21                                           3250.0       2.063515e+06   \n",
       "33                                           3197.0       1.231049e+07   \n",
       "168                                          3762.0       1.947734e+07   \n",
       "\n",
       "      PIB par hab  \n",
       "21    9896.717512  \n",
       "33    8729.136932  \n",
       "168  59059.596403  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Affichage des outliers supérieurs à 7500\n",
    "finaldf.loc[finaldf[\"Disponibilité intérieure\"] > 7500]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "724cb42a",
   "metadata": {},
   "source": [
    "#### Les Etats Unis, la Chine et le Brésil ont une disponiblité intérieure de poulet des plus élevées"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "743c8e52",
   "metadata": {},
   "source": [
    "### Exportations <a class=\"anchor\" id=\"exportations\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "50545e04",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Brésil</td>\n",
       "      <td>9982.0</td>\n",
       "      <td>4223.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>14201.0</td>\n",
       "      <td>207833823.0</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>2.063515e+06</td>\n",
       "      <td>9896.717512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>États-Unis d'Amérique</td>\n",
       "      <td>18266.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>21914.0</td>\n",
       "      <td>325084756.0</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>59059.596403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>Pays-Bas</td>\n",
       "      <td>372.0</td>\n",
       "      <td>1418.0</td>\n",
       "      <td>608.0</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>17021347.0</td>\n",
       "      <td>3251.0</td>\n",
       "      <td>8.338696e+05</td>\n",
       "      <td>48460.512961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>Pologne</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1025.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2351.0</td>\n",
       "      <td>37953180.0</td>\n",
       "      <td>3526.0</td>\n",
       "      <td>5.246412e+05</td>\n",
       "      <td>13615.440436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>Thaïlande</td>\n",
       "      <td>881.0</td>\n",
       "      <td>796.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1676.0</td>\n",
       "      <td>69209810.0</td>\n",
       "      <td>2826.0</td>\n",
       "      <td>4.563568e+05</td>\n",
       "      <td>6436.789649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>250.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>249.0</td>\n",
       "      <td>159685424.0</td>\n",
       "      <td>2596.0</td>\n",
       "      <td>2.889580e+05</td>\n",
       "      <td>1785.962903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>76.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>14236595.0</td>\n",
       "      <td>2167.0</td>\n",
       "      <td>2.204065e+04</td>\n",
       "      <td>1494.170144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Cuba</td>\n",
       "      <td>342.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>312.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>11339254.0</td>\n",
       "      <td>3409.0</td>\n",
       "      <td>9.685100e+04</td>\n",
       "      <td>8543.360968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>Nouvelle-Calédonie</td>\n",
       "      <td>11.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>277150.0</td>\n",
       "      <td>2750.0</td>\n",
       "      <td>9.174049e+03</td>\n",
       "      <td>32263.340715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>92</th>\n",
       "      <td>Mali</td>\n",
       "      <td>52.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>18512430.0</td>\n",
       "      <td>2923.0</td>\n",
       "      <td>1.536571e+04</td>\n",
       "      <td>795.682802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>171 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Zone  Disponibilité intérieure  Exportations  \\\n",
       "21                  Brésil                    9982.0        4223.0   \n",
       "168  États-Unis d'Amérique                   18266.0        3692.0   \n",
       "116               Pays-Bas                     372.0        1418.0   \n",
       "118                Pologne                    1156.0        1025.0   \n",
       "150              Thaïlande                     881.0         796.0   \n",
       "..                     ...                       ...           ...   \n",
       "14              Bangladesh                     250.0          -1.0   \n",
       "164               Zimbabwe                      76.0          -1.0   \n",
       "39                    Cuba                     342.0          -2.0   \n",
       "107     Nouvelle-Calédonie                      11.0          -2.0   \n",
       "92                    Mali                      52.0          -7.0   \n",
       "\n",
       "     Importations  Production   Population  \\\n",
       "21            3.0     14201.0  207833823.0   \n",
       "168         123.0     21914.0  325084756.0   \n",
       "116         608.0      1100.0   17021347.0   \n",
       "118          55.0      2351.0   37953180.0   \n",
       "150           2.0      1676.0   69209810.0   \n",
       "..            ...         ...          ...   \n",
       "14            0.0       249.0  159685424.0   \n",
       "164           6.0        69.0   14236595.0   \n",
       "39          312.0        29.0   11339254.0   \n",
       "107           9.0         1.0     277150.0   \n",
       "92            1.0        48.0   18512430.0   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  PIB (en millions)  \\\n",
       "21                                           3250.0       2.063515e+06   \n",
       "168                                          3762.0       1.947734e+07   \n",
       "116                                          3251.0       8.338696e+05   \n",
       "118                                          3526.0       5.246412e+05   \n",
       "150                                          2826.0       4.563568e+05   \n",
       "..                                              ...                ...   \n",
       "14                                           2596.0       2.889580e+05   \n",
       "164                                          2167.0       2.204065e+04   \n",
       "39                                           3409.0       9.685100e+04   \n",
       "107                                          2750.0       9.174049e+03   \n",
       "92                                           2923.0       1.536571e+04   \n",
       "\n",
       "      PIB par hab  \n",
       "21    9896.717512  \n",
       "168  59059.596403  \n",
       "116  48460.512961  \n",
       "118  13615.440436  \n",
       "150   6436.789649  \n",
       "..            ...  \n",
       "14    1785.962903  \n",
       "164   1494.170144  \n",
       "39    8543.360968  \n",
       "107  32263.340715  \n",
       "92     795.682802  \n",
       "\n",
       "[171 rows x 9 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#On sort les individus par les exportations de poulet\n",
    "finaldf.sort_values(by = 'Exportations', ascending = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "3bbda049",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>1.710000e+02</td>\n",
       "      <td>171.000000</td>\n",
       "      <td>1.710000e+02</td>\n",
       "      <td>171.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>678.982456</td>\n",
       "      <td>105.076023</td>\n",
       "      <td>88.064327</td>\n",
       "      <td>708.654971</td>\n",
       "      <td>4.295384e+07</td>\n",
       "      <td>2857.707602</td>\n",
       "      <td>4.670073e+05</td>\n",
       "      <td>13964.082129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2181.987404</td>\n",
       "      <td>459.210256</td>\n",
       "      <td>186.286880</td>\n",
       "      <td>2481.719692</td>\n",
       "      <td>1.535062e+08</td>\n",
       "      <td>455.789473</td>\n",
       "      <td>1.848920e+06</td>\n",
       "      <td>19255.100084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.204500e+04</td>\n",
       "      <td>1754.000000</td>\n",
       "      <td>1.881820e+02</td>\n",
       "      <td>414.740323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>28.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>2.864792e+06</td>\n",
       "      <td>2513.500000</td>\n",
       "      <td>1.194253e+04</td>\n",
       "      <td>1942.606984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>98.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>9.729823e+06</td>\n",
       "      <td>2871.000000</td>\n",
       "      <td>4.417908e+04</td>\n",
       "      <td>5960.707147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>349.500000</td>\n",
       "      <td>16.500000</td>\n",
       "      <td>78.500000</td>\n",
       "      <td>350.500000</td>\n",
       "      <td>3.046071e+07</td>\n",
       "      <td>3250.500000</td>\n",
       "      <td>2.358560e+05</td>\n",
       "      <td>17013.948466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>18266.000000</td>\n",
       "      <td>4223.000000</td>\n",
       "      <td>1069.000000</td>\n",
       "      <td>21914.000000</td>\n",
       "      <td>1.421022e+09</td>\n",
       "      <td>3770.000000</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>110203.008202</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Disponibilité intérieure  Exportations  Importations    Production  \\\n",
       "count                171.000000    171.000000    171.000000    171.000000   \n",
       "mean                 678.982456    105.076023     88.064327    708.654971   \n",
       "std                 2181.987404    459.210256    186.286880   2481.719692   \n",
       "min                    0.000000     -7.000000      0.000000      0.000000   \n",
       "25%                   28.500000      0.000000      3.000000     11.000000   \n",
       "50%                   98.000000      1.000000     16.000000     65.000000   \n",
       "75%                  349.500000     16.500000     78.500000    350.500000   \n",
       "max                18266.000000   4223.000000   1069.000000  21914.000000   \n",
       "\n",
       "         Population  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "count  1.710000e+02                                      171.000000   \n",
       "mean   4.295384e+07                                     2857.707602   \n",
       "std    1.535062e+08                                      455.789473   \n",
       "min    5.204500e+04                                     1754.000000   \n",
       "25%    2.864792e+06                                     2513.500000   \n",
       "50%    9.729823e+06                                     2871.000000   \n",
       "75%    3.046071e+07                                     3250.500000   \n",
       "max    1.421022e+09                                     3770.000000   \n",
       "\n",
       "       PIB (en millions)    PIB par hab  \n",
       "count       1.710000e+02     171.000000  \n",
       "mean        4.670073e+05   13964.082129  \n",
       "std         1.848920e+06   19255.100084  \n",
       "min         1.881820e+02     414.740323  \n",
       "25%         1.194253e+04    1942.606984  \n",
       "50%         4.417908e+04    5960.707147  \n",
       "75%         2.358560e+05   17013.948466  \n",
       "max         1.947734e+07  110203.008202  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Représentation en boîte à moustache des valeurs de la colonne 'Exportations'\n",
    "plt.figure(figsize= (8, 5))\n",
    "finaldf.boxplot(column='Exportations', vert = False, widths=0.5)\n",
    "plt.grid(False)\n",
    "plt.title(\"Représentation de la distribution des Disponibilité intérieure\")\n",
    "plt.show()\n",
    "\n",
    "finaldf.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3730d4d6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Brésil</td>\n",
       "      <td>9982.0</td>\n",
       "      <td>4223.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>14201.0</td>\n",
       "      <td>207833823.0</td>\n",
       "      <td>3250.0</td>\n",
       "      <td>2.063515e+06</td>\n",
       "      <td>9896.717512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>Pays-Bas</td>\n",
       "      <td>372.0</td>\n",
       "      <td>1418.0</td>\n",
       "      <td>608.0</td>\n",
       "      <td>1100.0</td>\n",
       "      <td>17021347.0</td>\n",
       "      <td>3251.0</td>\n",
       "      <td>8.338696e+05</td>\n",
       "      <td>48460.512961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>Pologne</td>\n",
       "      <td>1156.0</td>\n",
       "      <td>1025.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2351.0</td>\n",
       "      <td>37953180.0</td>\n",
       "      <td>3526.0</td>\n",
       "      <td>5.246412e+05</td>\n",
       "      <td>13615.440436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>États-Unis d'Amérique</td>\n",
       "      <td>18266.0</td>\n",
       "      <td>3692.0</td>\n",
       "      <td>123.0</td>\n",
       "      <td>21914.0</td>\n",
       "      <td>325084756.0</td>\n",
       "      <td>3762.0</td>\n",
       "      <td>1.947734e+07</td>\n",
       "      <td>59059.596403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Zone  Disponibilité intérieure  Exportations  \\\n",
       "21                  Brésil                    9982.0        4223.0   \n",
       "116               Pays-Bas                     372.0        1418.0   \n",
       "118                Pologne                    1156.0        1025.0   \n",
       "168  États-Unis d'Amérique                   18266.0        3692.0   \n",
       "\n",
       "     Importations  Production   Population  \\\n",
       "21            3.0     14201.0  207833823.0   \n",
       "116         608.0      1100.0   17021347.0   \n",
       "118          55.0      2351.0   37953180.0   \n",
       "168         123.0     21914.0  325084756.0   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  PIB (en millions)  \\\n",
       "21                                           3250.0       2.063515e+06   \n",
       "116                                          3251.0       8.338696e+05   \n",
       "118                                          3526.0       5.246412e+05   \n",
       "168                                          3762.0       1.947734e+07   \n",
       "\n",
       "      PIB par hab  \n",
       "21    9896.717512  \n",
       "116  48460.512961  \n",
       "118  13615.440436  \n",
       "168  59059.596403  "
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# On affiche les pays avec des exportations supérieures à 1000\n",
    "finaldf.loc[finaldf[\"Exportations\"] > 1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1b9dc35",
   "metadata": {},
   "source": [
    "#### Les Etats Unis, le Brésil, les Pays-Bas te la Pologne exportent le plus de poulet dans le monde"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31b173d2",
   "metadata": {},
   "source": [
    "## A Continuation, nous allons retirer une liste de pays afin d'affiner notre étude de marché:\n",
    "\n",
    "### 1. Outliers de population\n",
    "- Inde\n",
    "- Chine\n",
    "\n",
    "### 2. Pays avec disponibilité intérieure de poulet la plus élevée dans le monde\n",
    "- Etats-Unis\n",
    "- Chine\n",
    "- Brésil\n",
    "\n",
    "### 3. Pays avec exportation de poulet la plus élevée dans le monde\n",
    "- Etats-Unis\n",
    "- Brésil\n",
    "- Pays-Bas\n",
    "- Pologne\n",
    "\n",
    "### 4. Marché local sur lequel l'entreprise exerce déjà une activité économique\n",
    "- France"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "af53d08d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# List des outliers à retirer\n",
    "outliers_to_remove = [\"États-Unis d'Amérique\", \"Inde\", \"Chine, continentale\", \"Chine\", \"Brésil\", \"France\", \"Pays-Bas\", \"Pologne\"]\n",
    "\n",
    "# Suppréssion des outliers\n",
    "finaldf = finaldf[~finaldf['Zone'].isin(outliers_to_remove)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2b5e8751",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zone</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations</th>\n",
       "      <th>Importations</th>\n",
       "      <th>Production</th>\n",
       "      <th>Population</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>PIB (en millions)</th>\n",
       "      <th>PIB par hab</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>1.889635e+04</td>\n",
       "      <td>530.149831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2118.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>1667.0</td>\n",
       "      <td>57009756.0</td>\n",
       "      <td>2987.0</td>\n",
       "      <td>3.808514e+05</td>\n",
       "      <td>6723.928582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2884169.0</td>\n",
       "      <td>3400.0</td>\n",
       "      <td>1.301973e+04</td>\n",
       "      <td>4521.752219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>277.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>275.0</td>\n",
       "      <td>41389189.0</td>\n",
       "      <td>3345.0</td>\n",
       "      <td>1.700970e+05</td>\n",
       "      <td>4134.936054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>1739.0</td>\n",
       "      <td>646.0</td>\n",
       "      <td>842.0</td>\n",
       "      <td>1514.0</td>\n",
       "      <td>82658409.0</td>\n",
       "      <td>3559.0</td>\n",
       "      <td>3.690849e+06</td>\n",
       "      <td>44670.222288</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Zone  Disponibilité intérieure  Exportations  Importations  \\\n",
       "0     Afghanistan                      57.0           0.0          29.0   \n",
       "1  Afrique du Sud                    2118.0          63.0         514.0   \n",
       "2         Albanie                      47.0           0.0          38.0   \n",
       "3         Algérie                     277.0           0.0           2.0   \n",
       "4       Allemagne                    1739.0         646.0         842.0   \n",
       "\n",
       "   Production  Population  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0        28.0  36296113.0                                          1997.0   \n",
       "1      1667.0  57009756.0                                          2987.0   \n",
       "2        13.0   2884169.0                                          3400.0   \n",
       "3       275.0  41389189.0                                          3345.0   \n",
       "4      1514.0  82658409.0                                          3559.0   \n",
       "\n",
       "   PIB (en millions)   PIB par hab  \n",
       "0       1.889635e+04    530.149831  \n",
       "1       3.808514e+05   6723.928582  \n",
       "2       1.301973e+04   4521.752219  \n",
       "3       1.700970e+05   4134.936054  \n",
       "4       3.690849e+06  44670.222288  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5c92874b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(164, 9)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finaldf.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c781a20d",
   "metadata": {},
   "source": [
    "# <u> V. Exportation des dataframes finales sous csv <a class=\"anchor\" id=\"exportation\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "f24c12ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sauvegarde des dataframe df_final au format csv\n",
    "finaldf.to_csv('/Users/carloscorreawalasek/Desktop/finaldf.csv', index=0)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
