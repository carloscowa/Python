{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e7caf989",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28832751",
   "metadata": {},
   "source": [
    "# <u> Créer un NOTEBOOK qui montrera le panorama de l’état de la malnutrition dans le monde.</u>\n",
    "Le Notebook est constitué de 3 parties. Chaque partie correspond à des requêtes visant une personne (Marc, Mélanie, Julien).\n",
    "# <u> PARTIE 1: Requêtes de Marc </u>\n",
    "\n",
    "## Dans cette partie, nous allons faire ressortir les données suivantes :\n",
    "1. La proportion de personnes en état de sous-nutrition \n",
    "2. Le nombre théorique de personnes qui pourraient être nourries.*(calculé à partir de la disponibilité alimentaire mondiale)\n",
    "3. La disponibilité alimentaire des produits végétaux \n",
    "4. L’utilisation de la disponibilité intérieure\n",
    "    - Part attribuée à l’alimentation animale\n",
    "    - Part qui est perdue\n",
    "    - Part qui est concrètement utilisée pour l'alimentation humaine\n",
    "    \n",
    "**Cette étude va être realisée avec les données correspondants à l'année 2017**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8afe3611",
   "metadata": {},
   "source": [
    "## <u> 1. Proportion des personnes en état de sous-noutrition.</u>\n",
    "### Nous commencons par préparer le document sur lequel nous allons travailler\n",
    "\n",
    "- Première étape: Importation des fichiers 'population.csv' et 'sous_nutrition.csv' \n",
    "- Deuxième étape: Renommer les colonnes \"Zone\" et \"Valeur\" et les remplacer par \"Pays\" et \"Population\" dans les deux DataFrames\n",
    "- Troisième étape: Replacer les années intervales de la colonne \"Année\" par une seule année\n",
    "- Quatrième étape: Replacer les valeurs '<0,1' par '0'\n",
    "- Cinquième étape: Replacer les types de données \"Année\" (object -> int64) et \"Population_snutrition\" (object -> float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ad77bc07",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pays                      object\n",
       "Année                      int64\n",
       "Population_snutrition    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importation des dataframes\n",
    "population = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/population.csv')\n",
    "snutrition = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/sous_nutrition.csv',)\n",
    "\n",
    "#renommer les colonnes\n",
    "population.rename(columns={'Zone':'Pays','Valeur':'Population_total'}, inplace='TRUE')\n",
    "snutrition.rename(columns={'Zone':'Pays','Valeur':'Population_snutrition'}, inplace='TRUE')\n",
    "\n",
    "#replacer les intervalles d'années par une seule année de la colonne \"Année\" dans le dataframe \"snutrition\"\n",
    "snutrition = snutrition.replace({'Année' : {'2012-2014' : '2013','2013-2015' : '2014', '2014-2016': '2015', '2015-2017': '2016','2016-2018' : '2017', '2017-2019': '2018'}})\n",
    "\n",
    "#replacer les cellules '<0,1' par 0 de la colonne \"Population_snutrition\" dans le dataframe \"snutrition\"\n",
    "snutrition['Population_snutrition'] = snutrition['Population_snutrition'].replace(['<0.1'], '0')\n",
    "\n",
    "#replacer le type de donnée de la colonne \"Année\" de 'object' à 'int64'\n",
    "snutrition['Année']=snutrition['Année'].astype(\"int64\")\n",
    "\n",
    "#replacer le type de donnée de la colonne \"Population_snutrition\" de 'object' à 'float64'\n",
    "snutrition['Population_snutrition'] = snutrition['Population_snutrition'].astype(str).astype(float)\n",
    "\n",
    "snutrition.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cdd9083",
   "metadata": {},
   "source": [
    "### A présent, nous allons faire la jointure entre la DataFrame 'population' et la DataFrame 'snutrition' en désignant la colonne 'Pays' comme correspondance ou Clé Primaire\n",
    "\n",
    "Il va falloir à présent ajouter les informations de snutrition au dataframe population. Nous pourrons faire cela via la fonction [`merge`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html) de pandas.\n",
    "\n",
    "Ici, on souhaite absolument conserver l'ensemble des informations qui sont dans nos deux dataframe (population et snutrition) donc nous allons opter pour la méthode 'inner'.\n",
    "*(A noter que notre jointure se fera au travers de la colonne 'Pays')*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9a66c9f6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2013</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2014</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2015</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2017</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année_x  Population_total  Année_y  Population_snutrition\n",
       "0  Afghanistan     2013         32269.589     2013                    8.6\n",
       "1  Afghanistan     2013         32269.589     2014                    8.8\n",
       "2  Afghanistan     2013         32269.589     2015                    8.9\n",
       "3  Afghanistan     2013         32269.589     2016                    9.7\n",
       "4  Afghanistan     2013         32269.589     2017                   10.5"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final = pd.merge(population, snutrition, on='Pays', how='inner')\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db2957d6",
   "metadata": {},
   "source": [
    "## Ensuite, nous allons convertir les valeurs au même ordre de grandeur des colonnes Population_total pour qu'elle corresponde à la même Population_snutrition "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "63c5c345",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année_x  Population_total  Année_y  Population_snutrition\n",
       "0  Afghanistan     2013        32269589.0     2013                    8.6\n",
       "1  Afghanistan     2013        32269589.0     2014                    8.8\n",
       "2  Afghanistan     2013        32269589.0     2015                    8.9\n",
       "3  Afghanistan     2013        32269589.0     2016                    9.7\n",
       "4  Afghanistan     2013        32269589.0     2017                   10.5"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convertir l'unité de mésure de la colonne population_total exprimée en milliers d'habitants \n",
    "df_final['Population_total'] = df_final['Population_total'] * 1000\n",
    "\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a309abb",
   "metadata": {},
   "source": [
    "### Puis, nous allons filter les colonnes 'Année' (Année_x et Année_y) pour ne travailler qu'avec les données de 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d9daeac1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2017</td>\n",
       "      <td>57009756.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>3.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>2017</td>\n",
       "      <td>2884169.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>2017</td>\n",
       "      <td>41389189.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>2017</td>\n",
       "      <td>82658409.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Pays  Année_x  Population_total  Année_y  Population_snutrition\n",
       "28      Afghanistan     2017        36296113.0     2017                   10.5\n",
       "64   Afrique du Sud     2017        57009756.0     2017                    3.1\n",
       "100         Albanie     2017         2884169.0     2017                    0.1\n",
       "136         Algérie     2017        41389189.0     2017                    1.3\n",
       "172       Allemagne     2017        82658409.0     2017                    NaN"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#filtrer les colonnes Année pour faire apparaitre les données de 2017\n",
    "df_final2017 = df_final.loc[(df_final['Année_x'] == 2017) & (df_final['Année_y'] == 2017)]\n",
    "df_final2017.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15cf029b",
   "metadata": {},
   "source": [
    "### On additionne toutes les cellules de la colonne population_total de 2017 et puis nous allons additionner toutes les valeurs de la colonne population_snutrition de 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b753cec5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7543798779.0\n"
     ]
    }
   ],
   "source": [
    "#additionner toutes les valeurs de la population\n",
    "pop_total = df_final2017['Population_total'].sum()\n",
    "print(pop_total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cd1342e8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "535.7\n"
     ]
    }
   ],
   "source": [
    "#additionner toutes les valeurs de la population en sous-nutrition\n",
    "snutrition_total = df_final2017['Population_snutrition'].sum()\n",
    "print(snutrition_total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce0442cb",
   "metadata": {},
   "source": [
    "### On calcule la proportion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c53e85db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7.101196833235417e-06\n"
     ]
    }
   ],
   "source": [
    "part_sous_nutrition =(snutrition_total/(pop_total))*100\n",
    "print(part_sous_nutrition)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bf9be00",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "# <u> La proportion de la population en sous-nutrition  était de 7,1% en 2017 </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f65143e3",
   "metadata": {},
   "source": [
    "## <u> 2. Le nombre théorique de personnes qui pourraient être nourries. (calculé à partir de la disponibilité alimentaire mondiale).</u>\n",
    "### Nous commencons par préparer les documents sur lequels nous allons travailler\n",
    "- Première étape: Importation du fichier 'dispo_alimentaire.csv'\n",
    "- Deuxième étape: Renommer la colonne \"Zone\" et la remplacer par \"Pays\"\n",
    "- Troisème étape: Replacer les valeurs NaN par des '0'\n",
    "- Quatrième étape: Convertir les valeurs 'population_total' en millions\n",
    "- Cinquième étape: Replacer les types de données \"Population_total\" (object -> float)\n",
    "- Sixième étape: Filtrer seulement les données relatives à l'année 2017\n",
    "- Septième étape: Faire la jointure entre la table 'population' ( filtrée en 2017) et la table 'dispo_alimentaire' sur la valeur 'Pays'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d40c7e84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Abats Comestible</td>\n",
       "      <td>animale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.77</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays                Produit   Origine  Aliments pour animaux  \\\n",
       "0  Afghanistan       Abats Comestible   animale                    0.0   \n",
       "1  Afghanistan        Agrumes, Autres  vegetale                    0.0   \n",
       "2  Afghanistan  Aliments pour enfants  vegetale                    0.0   \n",
       "3  Afghanistan                 Ananas  vegetale                    0.0   \n",
       "4  Afghanistan                Bananes  vegetale                    0.0   \n",
       "\n",
       "   Autres Utilisations  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0                  0.0                                             5.0   \n",
       "1                  0.0                                             1.0   \n",
       "2                  0.0                                             1.0   \n",
       "3                  0.0                                             0.0   \n",
       "4                  0.0                                             4.0   \n",
       "\n",
       "   Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "0                                               1.72        \n",
       "1                                               1.29        \n",
       "2                                               0.06        \n",
       "3                                               0.00        \n",
       "4                                               2.70        \n",
       "\n",
       "   Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "0                                               0.20               \n",
       "1                                               0.01               \n",
       "2                                               0.01               \n",
       "3                                               0.00               \n",
       "4                                               0.02               \n",
       "\n",
       "   Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "0                                               0.77          \n",
       "1                                               0.02          \n",
       "2                                               0.03          \n",
       "3                                               0.00          \n",
       "4                                               0.05          \n",
       "\n",
       "   Disponibilité intérieure  Exportations - Quantité  Importations - Quantité  \\\n",
       "0                      53.0                      0.0                      0.0   \n",
       "1                      41.0                      2.0                     40.0   \n",
       "2                       2.0                      0.0                      2.0   \n",
       "3                       0.0                      0.0                      0.0   \n",
       "4                      82.0                      0.0                     82.0   \n",
       "\n",
       "   Nourriture  Pertes  Production  Semences  Traitement  Variation de stock  \\\n",
       "0        53.0     0.0        53.0       0.0         0.0                 0.0   \n",
       "1        39.0     2.0         3.0       0.0         0.0                 0.0   \n",
       "2         2.0     0.0         0.0       0.0         0.0                 0.0   \n",
       "3         0.0     0.0         0.0       0.0         0.0                 0.0   \n",
       "4        82.0     0.0         0.0       0.0         0.0                 0.0   \n",
       "\n",
       "    Année  Population_total  \n",
       "0  2017.0        36296113.0  \n",
       "1  2017.0        36296113.0  \n",
       "2  2017.0        36296113.0  \n",
       "3  2017.0        36296113.0  \n",
       "4  2017.0        36296113.0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importer les dataframe 'dispo_alimentaire'\n",
    "dispo_alimentaire = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/dispo_alimentaire.csv')\n",
    "\n",
    "#renommer la colonne 'Zone' par 'Pays'\n",
    "dispo_alimentaire.rename(columns={'Zone':'Pays'}, inplace='TRUE')\n",
    "\n",
    "#replacer les cellules 'NaN' par 0 dans la dataframe 'dispo_alimentaire'\n",
    "dispo_alimentaire= dispo_alimentaire.fillna(0)\n",
    "\n",
    "#convertir les valeurs de 'population_total' en millions\n",
    "population['Population_total'] = population['Population_total'] * 1000\n",
    "\n",
    "#replacer le type de donnée de la colonne \"Population_total\" de 'object' à 'float64'\n",
    "population['Population_total'] = population['Population_total'].astype(str).astype(float)\n",
    "\n",
    "#création d'une dataframe à partir de 'population' seulement avec les données de '2017' de la colonne 'Année'\n",
    "population2017 = population.loc[(population['Année'] == 2017)]\n",
    "\n",
    "#jointure entre les tables 'population2017' et 'dispo_alimentaire' sur la clé 'Pays' en sélectionner les valeurs 'Pays', 'Disponibilité alimentaire (Kcal/personne/jour)'\n",
    "all_products=pd.merge(dispo_alimentaire, population2017, on ='Pays', how='left')\n",
    "\n",
    "all_products.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d78068b7",
   "metadata": {},
   "source": [
    "### On va calculer la disponibilité alimentaire par personne/jour sur la valeur population\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5cb22910",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>...</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>dispo_par_pays</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Abats Comestible</td>\n",
       "      <td>animale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.77</td>\n",
       "      <td>53.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>6.624041e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>...</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1.324808e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1.324808e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>...</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>5.299232e+10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays                Produit   Origine  Aliments pour animaux  \\\n",
       "0  Afghanistan       Abats Comestible   animale                    0.0   \n",
       "1  Afghanistan        Agrumes, Autres  vegetale                    0.0   \n",
       "2  Afghanistan  Aliments pour enfants  vegetale                    0.0   \n",
       "3  Afghanistan                 Ananas  vegetale                    0.0   \n",
       "4  Afghanistan                Bananes  vegetale                    0.0   \n",
       "\n",
       "   Autres Utilisations  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0                  0.0                                             5.0   \n",
       "1                  0.0                                             1.0   \n",
       "2                  0.0                                             1.0   \n",
       "3                  0.0                                             0.0   \n",
       "4                  0.0                                             4.0   \n",
       "\n",
       "   Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "0                                               1.72        \n",
       "1                                               1.29        \n",
       "2                                               0.06        \n",
       "3                                               0.00        \n",
       "4                                               2.70        \n",
       "\n",
       "   Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "0                                               0.20               \n",
       "1                                               0.01               \n",
       "2                                               0.01               \n",
       "3                                               0.00               \n",
       "4                                               0.02               \n",
       "\n",
       "   Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "0                                               0.77          \n",
       "1                                               0.02          \n",
       "2                                               0.03          \n",
       "3                                               0.00          \n",
       "4                                               0.05          \n",
       "\n",
       "   Disponibilité intérieure  ...  Importations - Quantité  Nourriture  Pertes  \\\n",
       "0                      53.0  ...                      0.0        53.0     0.0   \n",
       "1                      41.0  ...                     40.0        39.0     2.0   \n",
       "2                       2.0  ...                      2.0         2.0     0.0   \n",
       "3                       0.0  ...                      0.0         0.0     0.0   \n",
       "4                      82.0  ...                     82.0        82.0     0.0   \n",
       "\n",
       "   Production  Semences  Traitement  Variation de stock   Année  \\\n",
       "0        53.0       0.0         0.0                 0.0  2017.0   \n",
       "1         3.0       0.0         0.0                 0.0  2017.0   \n",
       "2         0.0       0.0         0.0                 0.0  2017.0   \n",
       "3         0.0       0.0         0.0                 0.0  2017.0   \n",
       "4         0.0       0.0         0.0                 0.0  2017.0   \n",
       "\n",
       "   Population_total  dispo_par_pays  \n",
       "0        36296113.0    6.624041e+10  \n",
       "1        36296113.0    1.324808e+10  \n",
       "2        36296113.0    1.324808e+10  \n",
       "3        36296113.0    0.000000e+00  \n",
       "4        36296113.0    5.299232e+10  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculer la dispo alimentaire à partir de la population totale et pour une année (365 jours)\n",
    "all_products['dispo_par_pays'] = all_products['Disponibilité alimentaire (Kcal/personne/jour)']*all_products['Population_total']*365\n",
    "all_products.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c68dbfa9",
   "metadata": {},
   "source": [
    "### On va additionner toute la disponibilité mondiale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "74b4b4dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7635429388975815.0\n"
     ]
    }
   ],
   "source": [
    "#additioner la disponibilité mondiale\n",
    "dispo_mondiale=all_products['dispo_par_pays'].sum()\n",
    "print(dispo_mondiale)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa8096a9",
   "metadata": {},
   "source": [
    "#### D'après l'Organisation Mondiale de la Santé (OMS), un homme doit consommer environ 2 500 kilocalories (kcal) par jour.\n",
    "#### Les valeurs nous ont été données en jour, nous allons ramener le résultat à l'année (en multipliant les données par 365 jours).\n",
    "## Nous allons donc calculer le nombre de personnes qui pourraient être nourries à partir de la disponibilité mondiale et la valeur énérgetique journalière moyenne nécessaire pour s'alimenter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "834ca90c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8367593851 de personnes pourraient être nourries en 2017\n"
     ]
    }
   ],
   "source": [
    "#calculer la disponibilité mondiale par rapport à la consommation nécessaire par humain\n",
    "total=round(dispo_mondiale/(2500*365))\n",
    "print(total, \"de personnes pourraient être nourries en 2017\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4606392",
   "metadata": {},
   "source": [
    "### La population mondiale en 2017 était de 7 519 000 000 (selon l'ONU).\n",
    "### Le nombre théorique de personnes qui auraient pu être nourri en 2017 d'après la disponibilité alimentaire était de 8 367 593 850.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "819e825b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "111.28599349647558 % de la population aurait pu être nourrie en 2017\n"
     ]
    }
   ],
   "source": [
    "#exposer le résultat en %\n",
    "pop_mondiale_2017 = 7519000000\n",
    "\n",
    "total_theo =(total/pop_mondiale_2017)*100\n",
    "print(total_theo, \"% de la population aurait pu être nourrie en 2017\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84304f24",
   "metadata": {},
   "source": [
    "## <u> 110% de la population mondiale pourrait être nourrie. On conclut donc que TOUTE la population mondiale aurait pu être nourrie.</u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "858fd9ab",
   "metadata": {},
   "source": [
    "## <u> 3. La disponibilité alimentaire des produits végétaux </u>\n",
    "### Nous commencons par préparer le document sur lequel nous allons travailler\n",
    "- Première étape: Filter uniquement les valeurs 'vegetale' de la colonne 'Origine'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ac5b6598",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>...</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>dispo_par_pays</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>...</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1.324808e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>1.324808e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>...</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>5.299232e+10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bière</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>3.0</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays                Produit   Origine  Aliments pour animaux  \\\n",
       "1  Afghanistan        Agrumes, Autres  vegetale                    0.0   \n",
       "2  Afghanistan  Aliments pour enfants  vegetale                    0.0   \n",
       "3  Afghanistan                 Ananas  vegetale                    0.0   \n",
       "4  Afghanistan                Bananes  vegetale                    0.0   \n",
       "6  Afghanistan                  Bière  vegetale                    0.0   \n",
       "\n",
       "   Autres Utilisations  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "1                  0.0                                             1.0   \n",
       "2                  0.0                                             1.0   \n",
       "3                  0.0                                             0.0   \n",
       "4                  0.0                                             4.0   \n",
       "6                  0.0                                             0.0   \n",
       "\n",
       "   Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "1                                               1.29        \n",
       "2                                               0.06        \n",
       "3                                               0.00        \n",
       "4                                               2.70        \n",
       "6                                               0.09        \n",
       "\n",
       "   Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "1                                               0.01               \n",
       "2                                               0.01               \n",
       "3                                               0.00               \n",
       "4                                               0.02               \n",
       "6                                               0.00               \n",
       "\n",
       "   Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "1                                               0.02          \n",
       "2                                               0.03          \n",
       "3                                               0.00          \n",
       "4                                               0.05          \n",
       "6                                               0.00          \n",
       "\n",
       "   Disponibilité intérieure  ...  Importations - Quantité  Nourriture  Pertes  \\\n",
       "1                      41.0  ...                     40.0        39.0     2.0   \n",
       "2                       2.0  ...                      2.0         2.0     0.0   \n",
       "3                       0.0  ...                      0.0         0.0     0.0   \n",
       "4                      82.0  ...                     82.0        82.0     0.0   \n",
       "6                       3.0  ...                      3.0         3.0     0.0   \n",
       "\n",
       "   Production  Semences  Traitement  Variation de stock   Année  \\\n",
       "1         3.0       0.0         0.0                 0.0  2017.0   \n",
       "2         0.0       0.0         0.0                 0.0  2017.0   \n",
       "3         0.0       0.0         0.0                 0.0  2017.0   \n",
       "4         0.0       0.0         0.0                 0.0  2017.0   \n",
       "6         0.0       0.0         0.0                 0.0  2017.0   \n",
       "\n",
       "   Population_total  dispo_par_pays  \n",
       "1        36296113.0    1.324808e+10  \n",
       "2        36296113.0    1.324808e+10  \n",
       "3        36296113.0    0.000000e+00  \n",
       "4        36296113.0    5.299232e+10  \n",
       "6        36296113.0    0.000000e+00  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#création d'une dataframe à partir de 'dispo_alimentaire' seulement avec les données de 'vegetale' de la colonne 'Origine'\n",
    "dispoveg = all_products.loc[(all_products['Origine'] == 'vegetale')]\n",
    "dispoveg.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c1b11e2",
   "metadata": {},
   "source": [
    "### On va calculer la disponibilité alimentaire de végétaux par personne/jour sur la valeur population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1edf5b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6300178937197865.0\n"
     ]
    }
   ],
   "source": [
    "#calculer la disponibilité alimentaire en végétaux\n",
    "dispo_mondiale_veg=dispoveg['dispo_par_pays'].sum()\n",
    "print(dispo_mondiale_veg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "527e0513",
   "metadata": {},
   "source": [
    "#### D'après l'Organisation Mondiale de la Santé (OMS), un homme doit consommer environ 2 500 kilocalories (kcal) par jour.\n",
    "#### Les valeurs nous ont été données en jour, nous allons ramener le résultat à l'année (en multipliant les données par 365 jours).\n",
    "\n",
    "## Nous allons donc calculer le nombre de personnes qui pourraient être nourries à partir de la disponibilité mondiale et la valeur énérgetique journalière moyenne nécessaire pour s'alimenter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e0362625",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6904305684.6 de personnes pourraient être nourries avec des végétaux en 2017\n"
     ]
    }
   ],
   "source": [
    "#calculer le nombre de personnes qui pourraient être nourri avec les végetaux\n",
    "veggies=round(dispo_mondiale_veg/(2500*365),2)\n",
    "print(veggies,\"de personnes pourraient être nourries avec des végétaux en 2017\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbb34aed",
   "metadata": {},
   "source": [
    "## La population mondiale en 2017 était de *7 519 000 000* (selon l'ONU).\n",
    "## Le nombre théorique de personnes qui auraient pu être nourries à partir d'aliments d'origine végétale en 2017 était de *6 904 305 684*. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "262c0295",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "91.82478633594894 % de la population aurait pu être nourri avec des végétaux en 2017\n"
     ]
    }
   ],
   "source": [
    "#exposer le résultat en %\n",
    "pop_mondiale_2017 = 7519000000\n",
    "\n",
    "veggies_theo =((veggies/pop_mondiale_2017)*100)\n",
    "print(veggies_theo,\"% de la population aurait pu être nourri avec des végétaux en 2017\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5efea50f",
   "metadata": {},
   "source": [
    "## <u>91,8% de la population pourrait être nourrie avec des aliments d'origine végétale.</u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c9d5d8a",
   "metadata": {},
   "source": [
    "## <u> 4. L'utilisation de la disponibilité intérieur: </u>\n",
    "    - la part qui est attribuée à l’alimentation animale\n",
    "    - la part qui est perdue\n",
    "    - la part qui est concrètement utilisée pour l'alimentation humaine\n",
    "\n",
    "- Première étape: additionner toute la disponibilité intérieure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "87afe539",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9848994.0\n"
     ]
    }
   ],
   "source": [
    "#additioner la disponibilité intérieure\n",
    "dispo_int=dispo_alimentaire['Disponibilité intérieure'].sum()\n",
    "print(dispo_int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c517272e",
   "metadata": {},
   "source": [
    "### On additionne toutes les valeurs de la colonne 'Aliments pour animaux'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2f34cbe7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1304245.0\n"
     ]
    }
   ],
   "source": [
    "#additione les aliments pour animaux\n",
    "alim_anim=dispo_alimentaire['Aliments pour animaux'].sum()\n",
    "print(alim_anim)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6b65a96",
   "metadata": {},
   "source": [
    "### On va diviser le resultat des 'Aliments pour animaux' totale par la 'Disponibilité intérieure' totale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ad34bd9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13.242418464261426 % de la disponibilité intérieure est utilisée pour alimenter les animaux\n"
     ]
    }
   ],
   "source": [
    "#calculer la part pour les animaux sur la disponibilité intérieure\n",
    "part_animaux=alim_anim/dispo_int*100\n",
    "print(part_animaux, \"% de la disponibilité intérieure est utilisée pour alimenter les animaux\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce17843b",
   "metadata": {},
   "source": [
    "# <u> La proportion de la part pour alimenter les animaux sur la disponible intérieure totale est de  de 13,2% </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f22768d1",
   "metadata": {},
   "source": [
    "### On additionne toutes les valeurs de la colonne 'Pertes'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3027a4ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "453698.0\n"
     ]
    }
   ],
   "source": [
    "#additioner le total des pertes\n",
    "pertes=dispo_alimentaire['Pertes'].sum()\n",
    "print(pertes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abc81e2e",
   "metadata": {},
   "source": [
    "### On va diviser le resultat des 'Pertes' totales par la 'Disponibilité intérieure' totale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "518d0848",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.606541541196999 % de la disponibilité intérieure est perdue\n"
     ]
    }
   ],
   "source": [
    "#calcul de la part de pertes\n",
    "part_pertes=pertes/dispo_int*100\n",
    "print(part_pertes, \"% de la disponibilité intérieure est perdue\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16980813",
   "metadata": {},
   "source": [
    "# <u> La proportion des pertes sur la disponible intérieure totale est de  de 4,6% </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c14fbc95",
   "metadata": {},
   "source": [
    "### On additionne toutes les valeurs de la colonne 'Nourriture\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "82a9c067",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4876258.0\n"
     ]
    }
   ],
   "source": [
    "#additioner le total de la disponibilité alimentaire pour humains\n",
    "humains=dispo_alimentaire['Nourriture'].sum()\n",
    "print(humains)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b0b750cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "49.51021393657058 % de la disponibilité intérieure est utilisée pour les humains\n"
     ]
    }
   ],
   "source": [
    "#calcul de la part des aliments pour humains\n",
    "part_humains=humains/dispo_int*100\n",
    "print(part_humains,\"% de la disponibilité intérieure est utilisée pour les humains\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb4e21cc",
   "metadata": {},
   "source": [
    "# <u> La proportion de la nourriture pour humains sur la disponible intérieure totale est de 49,5% </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd9734b7",
   "metadata": {},
   "source": [
    "#### Afin de s'assurer de la cohérence des résultats ci-dessus, nous avons calculé la proportion de chaque utilisation de la disponibilité intérieure totale et nous les avons additioné.\n",
    "\n",
    "## Autres parts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83c2a762",
   "metadata": {},
   "source": [
    "Semences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c1c83258",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.5705258831511117 % de la disponibilité intérieure est utilisée pour les semences\n"
     ]
    }
   ],
   "source": [
    "#calcul de la part des aliments pour la semence\n",
    "semences=dispo_alimentaire['Semences'].sum()\n",
    "part_semences=semences/dispo_int*100\n",
    "print(part_semences,\"% de la disponibilité intérieure est utilisée pour les semences\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faf6b730",
   "metadata": {},
   "source": [
    "<u>Part \"Semences\" = 1,57% </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59ce973d",
   "metadata": {},
   "source": [
    "Traitement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "eb5321ad",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22.384895350733284 % de la disponibilité intérieure est utilisée pour les semences\n"
     ]
    }
   ],
   "source": [
    "#calcul de la part des aliments pour le traitement\n",
    "traitement=dispo_alimentaire['Traitement'].sum()\n",
    "part_traitement=traitement/dispo_int*100\n",
    "print(part_traitement,\"% de la disponibilité intérieure est utilisée pour les semences\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d3103ee",
   "metadata": {},
   "source": [
    "<u> Part \"Traitement\" = 22,38% </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beceae5d",
   "metadata": {},
   "source": [
    "Autres Utilisations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a1288555",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.782856401374598 % de la disponibilité intérieure est utilisée pour d'autres utilisations\n"
     ]
    }
   ],
   "source": [
    "#calcul de la part des aliments pour les autres utilisations\n",
    "var=dispo_alimentaire['Autres Utilisations'].sum()\n",
    "part_var=var/dispo_int*100\n",
    "print(part_var, \"% de la disponibilité intérieure est utilisée pour d'autres utilisations\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6990747d",
   "metadata": {},
   "source": [
    "<u>Part \"Autres Utilisations\" = 8,78% </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a8ace7d",
   "metadata": {},
   "source": [
    "### SOMME DE TOUTES LES PARTS DE LA DISPONIBILITÉ INTÉRIEURE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a37a8ad5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100.097451577288 % de la disponibilité intérieure est utilisée\n"
     ]
    }
   ],
   "source": [
    "#somme de toutes les parts de la disponibilité alimentaire\n",
    "total=part_animaux+part_pertes+part_humains+part_semences+part_traitement+part_var\n",
    "print(total,\"% de la disponibilité intérieure est utilisée\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbcc4227",
   "metadata": {},
   "source": [
    "### Nous allons faire une representation graphique de la disponiblité intérieure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "aacccc48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x792 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "part_dispo=('Animaux','Pertes','Humains','Semences','Traitement','Autres')\n",
    "\n",
    "pie_total=[13.2,4.6,49.5,1.5,22.3,8.7]\n",
    "\n",
    "plt.figure(figsize=(11,11))\n",
    "\n",
    "plt.pie(pie_total,labels=part_dispo, startangle=180,\n",
    "        colors=['yellow','red','orange','grey','lightgrey','darkgrey'],\n",
    "        autopct=\"%.1f%%\")\n",
    "\n",
    "plt.title(\"Repartition de la disponibilité intérieure\", fontweight=\"bold\", size='20')\n",
    "\n",
    "plt.legend(title=\"Part de la disponibilité intérieure\", loc='lower right', )\n",
    "\n",
    "plt.show(block = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "875d640b",
   "metadata": {},
   "source": [
    "## <u>Le resultat nous donne bien 100% (à 0,1% près) </u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f645e8b",
   "metadata": {},
   "source": [
    "# <u> PARTIE 2: Requêtes Mélanie </u>\n",
    "\n",
    "## Afin de répondre à cette demande, nous allons faire ressortir les données suivantes :\n",
    "1. Les pays pour lesquels la proportion de personnes sous-alimentées est la plus forte en 2017\n",
    "2. Les pays qui ont le plus bénéficié d'aides depuis 2013\n",
    "3. Les pays ayant le plus et le moins de disponibilités/habitants \n",
    "\n",
    "\n",
    "## <u> 1. Proportion des personnes en état de sous-noutrition par pays </u>\n",
    "\n",
    "### Nous commencons par préparer le document sur lequel nous allons travailler\n",
    "\n",
    "- Première étape: Importation du fichier 'population.csv' et 'sous_nutrition.csv' \n",
    "- Deuxième étape: Renommer les colonnes \"Zone\" et \"Valeur\" et les remplacer par \"Pays\" et \"Population\" dans les deux DataFrames\n",
    "- Troisème étape: Replacer les années intervales de la colonne \"Année\" par une seule année\n",
    "- Quatrième étape: Replacer les valeurs '<0,1' et 'NaN' par '0'\n",
    "- Cinquième étape: Replacer les types de données \"Année\" (object -> int64) et \"Population_snutrition\" (object -> float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "323828e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2014</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2015</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année  Population_snutrition\n",
       "0  Afghanistan   2013                    8.6\n",
       "1  Afghanistan   2014                    8.8\n",
       "2  Afghanistan   2015                    8.9\n",
       "3  Afghanistan   2016                    9.7\n",
       "4  Afghanistan   2017                   10.5"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#importer les dataframes\n",
    "population = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/population.csv')\n",
    "snutrition = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/sous_nutrition.csv')\n",
    "\n",
    "#renommer les colonnes\n",
    "population.rename(columns={'Zone':'Pays','Valeur':'Population_total'}, inplace='TRUE')\n",
    "snutrition.rename(columns={'Zone':'Pays','Valeur':'Population_snutrition'}, inplace='TRUE')\n",
    "\n",
    "#replacer les intervalles d'année par une seule année\n",
    "snutrition = snutrition.replace({'Année' : {'2012-2014' : '2013','2013-2015' : '2014', '2014-2016': '2015', '2015-2017': '2016','2016-2018' : '2017', '2017-2019': '2018'}})\n",
    "\n",
    "#replacer les cellules '<0,1' par 0 dans colonne \"Population_snutrition\"\n",
    "snutrition['Population_snutrition'] = snutrition['Population_snutrition'].replace(['<0.1'], '0')\n",
    "\n",
    "#replacer les cellules 'NaN' par 0 dans colonne \"Population_snutrition\"\n",
    "snutrition['Population_snutrition'] = snutrition['Population_snutrition'].fillna(0)\n",
    "\n",
    "#replacer le type de donnée de la colonne \"Année\" de 'object' à 'int64'\n",
    "snutrition['Année']=snutrition['Année'].astype(\"int64\")\n",
    "\n",
    "#replacer le type de donnée de la colonne Population_snutrition\" de 'object' à 'float64'\n",
    "snutrition['Population_snutrition'] = snutrition['Population_snutrition'].astype(str).astype(float)\n",
    "\n",
    "#replacer le type de donnée de la colonne Population_total\" de 'object' à 'float64'\n",
    "population['Population_total'] = population['Population_total'].astype(str).astype(float)\n",
    "\n",
    "snutrition.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "953f9145",
   "metadata": {},
   "source": [
    "### A présent, nous allons faire la jointure entre la DataFrame 'population' et la DataFrame 'snutrition' en désignant la colonne 'Pays' comme correspondance ou Clé Primaire\n",
    "\n",
    "Il va falloir à présent ajouter les informations de snutrition au dataframe population. Nous pourrons faire cela via la fonction [`merge`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html) de pandas.\n",
    "\n",
    "Ici, on souhaite absolument conserver l'ensemble des informations qui sont dans nos deux dataframe (population et snutrition) donc nous allons opter pour la méthode 'inner'.\n",
    "*(A noter que notre jointure se fera au travers de la colonne 'Pays')*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e998ba5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2013</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2014</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2015</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2016</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>2017</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année_x  Population_total  Année_y  Population_snutrition\n",
       "0  Afghanistan     2013         32269.589     2013                    8.6\n",
       "1  Afghanistan     2013         32269.589     2014                    8.8\n",
       "2  Afghanistan     2013         32269.589     2015                    8.9\n",
       "3  Afghanistan     2013         32269.589     2016                    9.7\n",
       "4  Afghanistan     2013         32269.589     2017                   10.5"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final = pd.merge(population, snutrition, on='Pays', how='inner')\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59eedb9a",
   "metadata": {},
   "source": [
    "## Ensuite, nous allons convertir les valeurs des colonnes Population_total pour qu'elles correspondend à la même Population_snutrition "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "84fad096",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2013</td>\n",
       "      <td>8600000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>8800000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>8900000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>9700000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10500000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année_x  Population_total  Année_y  Population_snutrition\n",
       "0  Afghanistan     2013        32269589.0     2013              8600000.0\n",
       "1  Afghanistan     2013        32269589.0     2014              8800000.0\n",
       "2  Afghanistan     2013        32269589.0     2015              8900000.0\n",
       "3  Afghanistan     2013        32269589.0     2016              9700000.0\n",
       "4  Afghanistan     2013        32269589.0     2017             10500000.0"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convertir l'ordre de grandeur de la colonne population_total exprimée en milliers d'habitants \n",
    "df_final['Population_total'] = df_final['Population_total'] * 1000\n",
    "df_final['Population_snutrition'] = df_final['Population_snutrition'] * 1000000\n",
    "df_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "faeaa714",
   "metadata": {},
   "source": [
    "### On va créer une colonne qui represente la part de la population en sous-noutrition par pays\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "745c91f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculer la part de la population en sous-nutrition par pays\n",
    "df_final['Proportion_snutrition'] = (df_final['Population_snutrition'] / df_final['Population_total'])*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28e06129",
   "metadata": {},
   "source": [
    "### Puis, nous allons filter les colonnes 'Année' (Année_x et Année_y) pour ne travailler qu'avec les données de 2017"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "51063647",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "      <th>Proportion_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10500000.0</td>\n",
       "      <td>28.928718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Afrique du Sud</td>\n",
       "      <td>2017</td>\n",
       "      <td>57009756.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>3100000.0</td>\n",
       "      <td>5.437666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>Albanie</td>\n",
       "      <td>2017</td>\n",
       "      <td>2884169.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>100000.0</td>\n",
       "      <td>3.467203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>Algérie</td>\n",
       "      <td>2017</td>\n",
       "      <td>41389189.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>1300000.0</td>\n",
       "      <td>3.140917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>2017</td>\n",
       "      <td>82658409.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Pays  Année_x  Population_total  Année_y  \\\n",
       "28      Afghanistan     2017        36296113.0     2017   \n",
       "64   Afrique du Sud     2017        57009756.0     2017   \n",
       "100         Albanie     2017         2884169.0     2017   \n",
       "136         Algérie     2017        41389189.0     2017   \n",
       "172       Allemagne     2017        82658409.0     2017   \n",
       "\n",
       "     Population_snutrition  Proportion_snutrition  \n",
       "28              10500000.0              28.928718  \n",
       "64               3100000.0               5.437666  \n",
       "100               100000.0               3.467203  \n",
       "136              1300000.0               3.140917  \n",
       "172                    0.0               0.000000  "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#filter pour ne faire apparaitre que les données de 2017\n",
    "df_final2017 = df_final.loc[(df_final['Année_x'] == 2017) & (df_final['Année_y'] == 2017)]\n",
    "df_final2017.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc3c5130",
   "metadata": {},
   "source": [
    "## <u> TOP 10 des pays en sous-nutrition (en %) </u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cc1f5918",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année_x</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Année_y</th>\n",
       "      <th>Population_snutrition</th>\n",
       "      <th>Proportion_snutrition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2836</th>\n",
       "      <td>Haïti</td>\n",
       "      <td>2017</td>\n",
       "      <td>10982366.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>5300000.0</td>\n",
       "      <td>48.259182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5680</th>\n",
       "      <td>République populaire démocratique de Corée</td>\n",
       "      <td>2017</td>\n",
       "      <td>25429825.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>12000000.0</td>\n",
       "      <td>47.188685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3916</th>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2017</td>\n",
       "      <td>25570512.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10500000.0</td>\n",
       "      <td>41.062924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3736</th>\n",
       "      <td>Libéria</td>\n",
       "      <td>2017</td>\n",
       "      <td>4702226.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>1800000.0</td>\n",
       "      <td>38.279742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3628</th>\n",
       "      <td>Lesotho</td>\n",
       "      <td>2017</td>\n",
       "      <td>2091534.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>800000.0</td>\n",
       "      <td>38.249438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6616</th>\n",
       "      <td>Tchad</td>\n",
       "      <td>2017</td>\n",
       "      <td>15016753.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>5700000.0</td>\n",
       "      <td>37.957606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5824</th>\n",
       "      <td>Rwanda</td>\n",
       "      <td>2017</td>\n",
       "      <td>11980961.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>4200000.0</td>\n",
       "      <td>35.055619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4384</th>\n",
       "      <td>Mozambique</td>\n",
       "      <td>2017</td>\n",
       "      <td>28649018.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>9400000.0</td>\n",
       "      <td>32.810898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6724</th>\n",
       "      <td>Timor-Leste</td>\n",
       "      <td>2017</td>\n",
       "      <td>1243258.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>32.173531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>10500000.0</td>\n",
       "      <td>28.928718</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            Pays  Année_x  Population_total  \\\n",
       "2836                                       Haïti     2017        10982366.0   \n",
       "5680  République populaire démocratique de Corée     2017        25429825.0   \n",
       "3916                                  Madagascar     2017        25570512.0   \n",
       "3736                                     Libéria     2017         4702226.0   \n",
       "3628                                     Lesotho     2017         2091534.0   \n",
       "6616                                       Tchad     2017        15016753.0   \n",
       "5824                                      Rwanda     2017        11980961.0   \n",
       "4384                                  Mozambique     2017        28649018.0   \n",
       "6724                                 Timor-Leste     2017         1243258.0   \n",
       "28                                   Afghanistan     2017        36296113.0   \n",
       "\n",
       "      Année_y  Population_snutrition  Proportion_snutrition  \n",
       "2836     2017              5300000.0              48.259182  \n",
       "5680     2017             12000000.0              47.188685  \n",
       "3916     2017             10500000.0              41.062924  \n",
       "3736     2017              1800000.0              38.279742  \n",
       "3628     2017               800000.0              38.249438  \n",
       "6616     2017              5700000.0              37.957606  \n",
       "5824     2017              4200000.0              35.055619  \n",
       "4384     2017              9400000.0              32.810898  \n",
       "6724     2017               400000.0              32.173531  \n",
       "28       2017             10500000.0              28.928718  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final2017.sort_values(by='Proportion_snutrition', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aff0cdc9",
   "metadata": {},
   "source": [
    "## <u> 2. Les pays qui ont le plus bénéficié d'aides depuis 2013. </u>\n",
    "\n",
    "### Nous commencons par préparer le document sur lequel nous allons travailler\n",
    "\n",
    "- Première étape: Importation du fichier 'aide_alimentaire.csv' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cfccfc11",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importer le dataframe\n",
    "aide = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/aide_alimentaire.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dee43cca",
   "metadata": {},
   "source": [
    "### Puis additionner les données de la colonne 'Valeur' par pays bénéficiaire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "562e2128",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Faire la somme des valeurs par pays\n",
    "aide = aide.groupby(by='Pays bénéficiaire')['Valeur'].sum().reset_index()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f920ef7",
   "metadata": {},
   "source": [
    "# <u> TOP 10 des pays bénéficiaires </u>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "2a8970f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays bénéficiaire</th>\n",
       "      <th>Valeur</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>République arabe syrienne</td>\n",
       "      <td>1858943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>Éthiopie</td>\n",
       "      <td>1381294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>Yémen</td>\n",
       "      <td>1206484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>Soudan du Sud</td>\n",
       "      <td>695248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>Soudan</td>\n",
       "      <td>669784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Kenya</td>\n",
       "      <td>552836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>348188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>Somalie</td>\n",
       "      <td>292678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>République démocratique du Congo</td>\n",
       "      <td>288502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Niger</td>\n",
       "      <td>276344</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Pays bénéficiaire   Valeur\n",
       "50         République arabe syrienne  1858943\n",
       "75                          Éthiopie  1381294\n",
       "70                             Yémen  1206484\n",
       "61                     Soudan du Sud   695248\n",
       "60                            Soudan   669784\n",
       "30                             Kenya   552836\n",
       "3                         Bangladesh   348188\n",
       "59                           Somalie   292678\n",
       "53  République démocratique du Congo   288502\n",
       "43                             Niger   276344"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Présenter les résultats en ordre décroissant du plus grand au plus petit (TOP 10)\n",
    "aide.sort_values(by='Valeur', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2009633b",
   "metadata": {},
   "source": [
    "## <u> 3. Les pays qui ont le plus et le moins de disponibilités/habitant. </u>\n",
    "\n",
    "### Nous commencons par préparer le document sur lequel nous allons travailler\n",
    "\n",
    "- Première étape: Importation du fichier 'dispo alimentaire.csv'\n",
    "- Deuxième étape: Renommer la colonne \"Zone\" et la remplacer par \"Pays\"\n",
    "- Troisème étape: Replacer les valeurs NaN par des '0'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "4184b7a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Abats Comestible</td>\n",
       "      <td>animale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.77</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays                Produit   Origine  Aliments pour animaux  \\\n",
       "0  Afghanistan       Abats Comestible   animale                    0.0   \n",
       "1  Afghanistan        Agrumes, Autres  vegetale                    0.0   \n",
       "2  Afghanistan  Aliments pour enfants  vegetale                    0.0   \n",
       "3  Afghanistan                 Ananas  vegetale                    0.0   \n",
       "4  Afghanistan                Bananes  vegetale                    0.0   \n",
       "\n",
       "   Autres Utilisations  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0                  0.0                                             5.0   \n",
       "1                  0.0                                             1.0   \n",
       "2                  0.0                                             1.0   \n",
       "3                  0.0                                             0.0   \n",
       "4                  0.0                                             4.0   \n",
       "\n",
       "   Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "0                                               1.72        \n",
       "1                                               1.29        \n",
       "2                                               0.06        \n",
       "3                                               0.00        \n",
       "4                                               2.70        \n",
       "\n",
       "   Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "0                                               0.20               \n",
       "1                                               0.01               \n",
       "2                                               0.01               \n",
       "3                                               0.00               \n",
       "4                                               0.02               \n",
       "\n",
       "   Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "0                                               0.77          \n",
       "1                                               0.02          \n",
       "2                                               0.03          \n",
       "3                                               0.00          \n",
       "4                                               0.05          \n",
       "\n",
       "   Disponibilité intérieure  Exportations - Quantité  Importations - Quantité  \\\n",
       "0                      53.0                      0.0                      0.0   \n",
       "1                      41.0                      2.0                     40.0   \n",
       "2                       2.0                      0.0                      2.0   \n",
       "3                       0.0                      0.0                      0.0   \n",
       "4                      82.0                      0.0                     82.0   \n",
       "\n",
       "   Nourriture  Pertes  Production  Semences  Traitement  Variation de stock  \n",
       "0        53.0     0.0        53.0       0.0         0.0                 0.0  \n",
       "1        39.0     2.0         3.0       0.0         0.0                 0.0  \n",
       "2         2.0     0.0         0.0       0.0         0.0                 0.0  \n",
       "3         0.0     0.0         0.0       0.0         0.0                 0.0  \n",
       "4        82.0     0.0         0.0       0.0         0.0                 0.0  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# importer la dataframe\n",
    "dispo_alimentaire = pd.read_csv ('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P4/Annexes Projet/Annexes Mission/DAN-P4-FAO/dispo_alimentaire.csv')\n",
    "\n",
    "#renommer la colonne 'Zone' par 'Pays'\n",
    "dispo_alimentaire.rename(columns={'Zone':'Pays'}, inplace='TRUE')\n",
    "\n",
    "#replacer les cellules 'NaN' par 0 dans la dataframe 'dispo_alimentaire'\n",
    "dispo_alimentaire= dispo_alimentaire.fillna(0)\n",
    "\n",
    "dispo_alimentaire.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f219db15",
   "metadata": {},
   "source": [
    "### A présent, nous allons faire la jointure entre la DataFrame 'population' et la DataFrame 'aide alimentaire' en désignant la colonne 'Pays' comme correspondance ou Clé Primaire\n",
    "\n",
    "Il va falloir à présent ajouter les informations de snutrition au dataframe population. Nous pourrons faire cela via la fonction [`merge`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html) de pandas.\n",
    "\n",
    "Ici, on souhaite absolument conserver l'ensemble des informations qui sont dans nos deux dataframe (population et aide alimentaire) donc nous allons opter pour la méthode 'inner'.\n",
    "*(A noter que notre jointure se fera au travers de la colonne 'Pays')*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "56870b1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>Abats Comestible</td>\n",
       "      <td>animale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.77</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269.589</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année  Population_total                Produit   Origine  \\\n",
       "0  Afghanistan   2013         32269.589       Abats Comestible   animale   \n",
       "1  Afghanistan   2013         32269.589        Agrumes, Autres  vegetale   \n",
       "2  Afghanistan   2013         32269.589  Aliments pour enfants  vegetale   \n",
       "3  Afghanistan   2013         32269.589                 Ananas  vegetale   \n",
       "4  Afghanistan   2013         32269.589                Bananes  vegetale   \n",
       "\n",
       "   Aliments pour animaux  Autres Utilisations  \\\n",
       "0                    0.0                  0.0   \n",
       "1                    0.0                  0.0   \n",
       "2                    0.0                  0.0   \n",
       "3                    0.0                  0.0   \n",
       "4                    0.0                  0.0   \n",
       "\n",
       "   Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0                                             5.0   \n",
       "1                                             1.0   \n",
       "2                                             1.0   \n",
       "3                                             0.0   \n",
       "4                                             4.0   \n",
       "\n",
       "   Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "0                                               1.72        \n",
       "1                                               1.29        \n",
       "2                                               0.06        \n",
       "3                                               0.00        \n",
       "4                                               2.70        \n",
       "\n",
       "   Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "0                                               0.20               \n",
       "1                                               0.01               \n",
       "2                                               0.01               \n",
       "3                                               0.00               \n",
       "4                                               0.02               \n",
       "\n",
       "   Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "0                                               0.77          \n",
       "1                                               0.02          \n",
       "2                                               0.03          \n",
       "3                                               0.00          \n",
       "4                                               0.05          \n",
       "\n",
       "   Disponibilité intérieure  Exportations - Quantité  Importations - Quantité  \\\n",
       "0                      53.0                      0.0                      0.0   \n",
       "1                      41.0                      2.0                     40.0   \n",
       "2                       2.0                      0.0                      2.0   \n",
       "3                       0.0                      0.0                      0.0   \n",
       "4                      82.0                      0.0                     82.0   \n",
       "\n",
       "   Nourriture  Pertes  Production  Semences  Traitement  Variation de stock  \n",
       "0        53.0     0.0        53.0       0.0         0.0                 0.0  \n",
       "1        39.0     2.0         3.0       0.0         0.0                 0.0  \n",
       "2         2.0     0.0         0.0       0.0         0.0                 0.0  \n",
       "3         0.0     0.0         0.0       0.0         0.0                 0.0  \n",
       "4        82.0     0.0         0.0       0.0         0.0                 0.0  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#faire la jointure entre les deux dataframe\n",
    "df = pd.merge(population, dispo_alimentaire, on='Pays', how='inner')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4df017f5",
   "metadata": {},
   "source": [
    "### On convertit les valeurs de 'population_total' en millions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "194ebf44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>Abats Comestible</td>\n",
       "      <td>animale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.77</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2013</td>\n",
       "      <td>32269589.0</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Pays  Année  Population_total                Produit   Origine  \\\n",
       "0  Afghanistan   2013        32269589.0       Abats Comestible   animale   \n",
       "1  Afghanistan   2013        32269589.0        Agrumes, Autres  vegetale   \n",
       "2  Afghanistan   2013        32269589.0  Aliments pour enfants  vegetale   \n",
       "3  Afghanistan   2013        32269589.0                 Ananas  vegetale   \n",
       "4  Afghanistan   2013        32269589.0                Bananes  vegetale   \n",
       "\n",
       "   Aliments pour animaux  Autres Utilisations  \\\n",
       "0                    0.0                  0.0   \n",
       "1                    0.0                  0.0   \n",
       "2                    0.0                  0.0   \n",
       "3                    0.0                  0.0   \n",
       "4                    0.0                  0.0   \n",
       "\n",
       "   Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "0                                             5.0   \n",
       "1                                             1.0   \n",
       "2                                             1.0   \n",
       "3                                             0.0   \n",
       "4                                             4.0   \n",
       "\n",
       "   Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "0                                               1.72        \n",
       "1                                               1.29        \n",
       "2                                               0.06        \n",
       "3                                               0.00        \n",
       "4                                               2.70        \n",
       "\n",
       "   Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "0                                               0.20               \n",
       "1                                               0.01               \n",
       "2                                               0.01               \n",
       "3                                               0.00               \n",
       "4                                               0.02               \n",
       "\n",
       "   Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "0                                               0.77          \n",
       "1                                               0.02          \n",
       "2                                               0.03          \n",
       "3                                               0.00          \n",
       "4                                               0.05          \n",
       "\n",
       "   Disponibilité intérieure  Exportations - Quantité  Importations - Quantité  \\\n",
       "0                      53.0                      0.0                      0.0   \n",
       "1                      41.0                      2.0                     40.0   \n",
       "2                       2.0                      0.0                      2.0   \n",
       "3                       0.0                      0.0                      0.0   \n",
       "4                      82.0                      0.0                     82.0   \n",
       "\n",
       "   Nourriture  Pertes  Production  Semences  Traitement  Variation de stock  \n",
       "0        53.0     0.0        53.0       0.0         0.0                 0.0  \n",
       "1        39.0     2.0         3.0       0.0         0.0                 0.0  \n",
       "2         2.0     0.0         0.0       0.0         0.0                 0.0  \n",
       "3         0.0     0.0         0.0       0.0         0.0                 0.0  \n",
       "4        82.0     0.0         0.0       0.0         0.0                 0.0  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#convertir les valeurs de 'population_total' en millions\n",
    "df['Population_total'] = df['Population_total'] * 1000\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "574195e4",
   "metadata": {},
   "source": [
    "**Cette étude va être realisée avec les données correspondant à l'année 2017**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d4f53835",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Année</th>\n",
       "      <th>Population_total</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>Abats Comestible</td>\n",
       "      <td>animale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.72</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.77</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>241</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>Agrumes, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.29</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.02</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>Aliments pour enfants</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>Ananas</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>244</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2017</td>\n",
       "      <td>36296113.0</td>\n",
       "      <td>Bananes</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.70</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Pays  Année  Population_total                Produit   Origine  \\\n",
       "240  Afghanistan   2017        36296113.0       Abats Comestible   animale   \n",
       "241  Afghanistan   2017        36296113.0        Agrumes, Autres  vegetale   \n",
       "242  Afghanistan   2017        36296113.0  Aliments pour enfants  vegetale   \n",
       "243  Afghanistan   2017        36296113.0                 Ananas  vegetale   \n",
       "244  Afghanistan   2017        36296113.0                Bananes  vegetale   \n",
       "\n",
       "     Aliments pour animaux  Autres Utilisations  \\\n",
       "240                    0.0                  0.0   \n",
       "241                    0.0                  0.0   \n",
       "242                    0.0                  0.0   \n",
       "243                    0.0                  0.0   \n",
       "244                    0.0                  0.0   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "240                                             5.0   \n",
       "241                                             1.0   \n",
       "242                                             1.0   \n",
       "243                                             0.0   \n",
       "244                                             4.0   \n",
       "\n",
       "     Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "240                                               1.72        \n",
       "241                                               1.29        \n",
       "242                                               0.06        \n",
       "243                                               0.00        \n",
       "244                                               2.70        \n",
       "\n",
       "     Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "240                                               0.20               \n",
       "241                                               0.01               \n",
       "242                                               0.01               \n",
       "243                                               0.00               \n",
       "244                                               0.02               \n",
       "\n",
       "     Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "240                                               0.77          \n",
       "241                                               0.02          \n",
       "242                                               0.03          \n",
       "243                                               0.00          \n",
       "244                                               0.05          \n",
       "\n",
       "     Disponibilité intérieure  Exportations - Quantité  \\\n",
       "240                      53.0                      0.0   \n",
       "241                      41.0                      2.0   \n",
       "242                       2.0                      0.0   \n",
       "243                       0.0                      0.0   \n",
       "244                      82.0                      0.0   \n",
       "\n",
       "     Importations - Quantité  Nourriture  Pertes  Production  Semences  \\\n",
       "240                      0.0        53.0     0.0        53.0       0.0   \n",
       "241                     40.0        39.0     2.0         3.0       0.0   \n",
       "242                      2.0         2.0     0.0         0.0       0.0   \n",
       "243                      0.0         0.0     0.0         0.0       0.0   \n",
       "244                     82.0        82.0     0.0         0.0       0.0   \n",
       "\n",
       "     Traitement  Variation de stock  \n",
       "240         0.0                 0.0  \n",
       "241         0.0                 0.0  \n",
       "242         0.0                 0.0  \n",
       "243         0.0                 0.0  \n",
       "244         0.0                 0.0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#filter pour ne faire ressortir que les données de 2017\n",
    "df2017 = df.loc[(df['Année'] == 2017)]\n",
    "df2017.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc35ca72",
   "metadata": {},
   "source": [
    "### Puis additionner les données de la colonne 'Disponibilité alimentaire en quantité (kg/personne/an)' par pays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cbaa79df",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Faire la somme de la disponibilité alimentaire en quantité par pays\n",
    "df_dispoalim2017 = df2017.groupby(by='Pays')['Disponibilité alimentaire (Kcal/personne/jour)'].sum().reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ee71644",
   "metadata": {},
   "source": [
    "# <u> TOP 10 des pays avec le plus de disponibilité alimentaire </u>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "cf40dfb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Autriche</td>\n",
       "      <td>3770.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Belgique</td>\n",
       "      <td>3737.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>157</th>\n",
       "      <td>Turquie</td>\n",
       "      <td>3708.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>169</th>\n",
       "      <td>États-Unis d'Amérique</td>\n",
       "      <td>3682.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Israël</td>\n",
       "      <td>3610.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>72</th>\n",
       "      <td>Irlande</td>\n",
       "      <td>3602.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>Italie</td>\n",
       "      <td>3578.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>Luxembourg</td>\n",
       "      <td>3540.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>166</th>\n",
       "      <td>Égypte</td>\n",
       "      <td>3518.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Allemagne</td>\n",
       "      <td>3503.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Pays  Disponibilité alimentaire (Kcal/personne/jour)\n",
       "11                Autriche                                          3770.0\n",
       "16                Belgique                                          3737.0\n",
       "157                Turquie                                          3708.0\n",
       "169  États-Unis d'Amérique                                          3682.0\n",
       "74                  Israël                                          3610.0\n",
       "72                 Irlande                                          3602.0\n",
       "75                  Italie                                          3578.0\n",
       "89              Luxembourg                                          3540.0\n",
       "166                 Égypte                                          3518.0\n",
       "4                Allemagne                                          3503.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Présenter les résultats en ordre décroissant (TOP 10)\n",
    "df_dispoalim2017.sort_values(by='Disponibilité alimentaire (Kcal/personne/jour)', ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e58ed28",
   "metadata": {},
   "source": [
    "# <u> TOP 10 des pays avec le moins de disponibilité alimentaire </u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c06d4299",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>République centrafricaine</td>\n",
       "      <td>1879.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>164</th>\n",
       "      <td>Zambie</td>\n",
       "      <td>1924.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>Madagascar</td>\n",
       "      <td>2056.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>2087.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Haïti</td>\n",
       "      <td>2089.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132</th>\n",
       "      <td>République populaire démocratique de Corée</td>\n",
       "      <td>2093.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>Tchad</td>\n",
       "      <td>2109.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>165</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>2113.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>Ouganda</td>\n",
       "      <td>2126.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>Timor-Leste</td>\n",
       "      <td>2129.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Pays  \\\n",
       "127                   République centrafricaine   \n",
       "164                                      Zambie   \n",
       "91                                   Madagascar   \n",
       "0                                   Afghanistan   \n",
       "65                                        Haïti   \n",
       "132  République populaire démocratique de Corée   \n",
       "150                                       Tchad   \n",
       "165                                    Zimbabwe   \n",
       "114                                     Ouganda   \n",
       "152                                 Timor-Leste   \n",
       "\n",
       "     Disponibilité alimentaire (Kcal/personne/jour)  \n",
       "127                                          1879.0  \n",
       "164                                          1924.0  \n",
       "91                                           2056.0  \n",
       "0                                            2087.0  \n",
       "65                                           2089.0  \n",
       "132                                          2093.0  \n",
       "150                                          2109.0  \n",
       "165                                          2113.0  \n",
       "114                                          2126.0  \n",
       "152                                          2129.0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Présenter les résultats en ordre décroissant (TOP 10)\n",
    "df_dispoalim2017.sort_values(by='Disponibilité alimentaire (Kcal/personne/jour)', ascending=True).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d62fac8d",
   "metadata": {},
   "source": [
    "# <u> Partie 3: Requêtes Julien </u>\n",
    "\n",
    "- Lien logique entre l'ensemble de 10 variables exprimé sous forme d'équation pour avoir la disponibilité alimentaire.\n",
    "- Utilisation des céréales.\n",
    "- Utilisation de manioc en Thailande."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04aab123",
   "metadata": {},
   "source": [
    "## <u> 1. Équation de la disponibilité alimentaire."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2b8236c",
   "metadata": {},
   "source": [
    "\n",
    "##### Disponibilité Intérieure = Production + Importation - Exportation + Variation du stock = Nourriture + Pertes + Semences + Traitement + Aliments Animaux + Autres Utilisations "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65c2e505",
   "metadata": {},
   "source": [
    "## <u> 2. Utilisation des céréales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b49d29f8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pays</th>\n",
       "      <th>Produit</th>\n",
       "      <th>Origine</th>\n",
       "      <th>Aliments pour animaux</th>\n",
       "      <th>Autres Utilisations</th>\n",
       "      <th>Disponibilité alimentaire (Kcal/personne/jour)</th>\n",
       "      <th>Disponibilité alimentaire en quantité (kg/personne/an)</th>\n",
       "      <th>Disponibilité de matière grasse en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité de protéines en quantité (g/personne/jour)</th>\n",
       "      <th>Disponibilité intérieure</th>\n",
       "      <th>Exportations - Quantité</th>\n",
       "      <th>Importations - Quantité</th>\n",
       "      <th>Nourriture</th>\n",
       "      <th>Pertes</th>\n",
       "      <th>Production</th>\n",
       "      <th>Semences</th>\n",
       "      <th>Traitement</th>\n",
       "      <th>Variation de stock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Blé</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1369.0</td>\n",
       "      <td>160.23</td>\n",
       "      <td>4.69</td>\n",
       "      <td>36.91</td>\n",
       "      <td>5992.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1173.0</td>\n",
       "      <td>4895.0</td>\n",
       "      <td>775.0</td>\n",
       "      <td>5169.0</td>\n",
       "      <td>322.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Céréales, Autres</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Maïs</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>200.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>0.30</td>\n",
       "      <td>0.56</td>\n",
       "      <td>313.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>312.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Millet</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.08</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Orge</td>\n",
       "      <td>vegetale</td>\n",
       "      <td>360.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>2.92</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.79</td>\n",
       "      <td>524.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>514.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Pays           Produit   Origine  Aliments pour animaux  \\\n",
       "7   Afghanistan               Blé  vegetale                    0.0   \n",
       "12  Afghanistan  Céréales, Autres  vegetale                    0.0   \n",
       "32  Afghanistan              Maïs  vegetale                  200.0   \n",
       "34  Afghanistan            Millet  vegetale                    0.0   \n",
       "40  Afghanistan              Orge  vegetale                  360.0   \n",
       "\n",
       "    Autres Utilisations  Disponibilité alimentaire (Kcal/personne/jour)  \\\n",
       "7                   0.0                                          1369.0   \n",
       "12                  0.0                                             0.0   \n",
       "32                  0.0                                            21.0   \n",
       "34                  0.0                                             3.0   \n",
       "40                  0.0                                            26.0   \n",
       "\n",
       "    Disponibilité alimentaire en quantité (kg/personne/an)  \\\n",
       "7                                              160.23        \n",
       "12                                               0.00        \n",
       "32                                               2.50        \n",
       "34                                               0.40        \n",
       "40                                               2.92        \n",
       "\n",
       "    Disponibilité de matière grasse en quantité (g/personne/jour)  \\\n",
       "7                                                4.69               \n",
       "12                                               0.00               \n",
       "32                                               0.30               \n",
       "34                                               0.02               \n",
       "40                                               0.24               \n",
       "\n",
       "    Disponibilité de protéines en quantité (g/personne/jour)  \\\n",
       "7                                               36.91          \n",
       "12                                               0.00          \n",
       "32                                               0.56          \n",
       "34                                               0.08          \n",
       "40                                               0.79          \n",
       "\n",
       "    Disponibilité intérieure  Exportations - Quantité  \\\n",
       "7                     5992.0                      0.0   \n",
       "12                       0.0                      0.0   \n",
       "32                     313.0                      0.0   \n",
       "34                      13.0                      0.0   \n",
       "40                     524.0                      0.0   \n",
       "\n",
       "    Importations - Quantité  Nourriture  Pertes  Production  Semences  \\\n",
       "7                    1173.0      4895.0   775.0      5169.0     322.0   \n",
       "12                      0.0         0.0     0.0         0.0       0.0   \n",
       "32                      1.0        76.0    31.0       312.0       5.0   \n",
       "34                      0.0        12.0     1.0        13.0       0.0   \n",
       "40                     10.0        89.0    52.0       514.0      22.0   \n",
       "\n",
       "    Traitement  Variation de stock  \n",
       "7          0.0              -350.0  \n",
       "12         0.0                 0.0  \n",
       "32         0.0                 0.0  \n",
       "34         0.0                 0.0  \n",
       "40         0.0                 0.0  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#créer une liste avec toutes les céréales ressencés dans la colonne \"Produit\"\n",
    "liste_cereales=['Blé', 'Riz (Eq Blanchi)', 'Orge', 'Maïs', 'Seigle', 'Avoine', 'Millet', 'Sorgho', 'Céréales, Autres']\n",
    "\n",
    "#filter le fichier avec les données correspondantes aux céréales\n",
    "dispo_alimentaire_cereales=dispo_alimentaire[dispo_alimentaire['Produit'].isin(liste_cereales)]\n",
    "dispo_alimentaire_cereales.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69fb31b9",
   "metadata": {},
   "source": [
    "### Nous allons additioner les valeurs de chaque utilisation des céréales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "47a8fa7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#additionner les valeurs des céréales correspondantes à la part des humains (Nourriture) et la part des animaux\n",
    "dispo_cereales_total=dispo_alimentaire_cereales['Disponibilité intérieure'].sum()\n",
    "dispo_prod=dispo_alimentaire_cereales['Production'].sum()\n",
    "dispo_import=dispo_alimentaire_cereales['Importations - Quantité'].sum()\n",
    "dispo_export=dispo_alimentaire_cereales['Exportations - Quantité'].sum()\n",
    "dispo_animaux=dispo_alimentaire_cereales['Aliments pour animaux'].sum()\n",
    "dispo_nourriture=dispo_alimentaire_cereales['Nourriture'].sum()\n",
    "dispo_pertes=dispo_alimentaire_cereales['Pertes'].sum()\n",
    "var_stock=dispo_alimentaire_cereales['Variation de stock'].sum()\n",
    "dispo_autres=dispo_alimentaire_cereales['Autres Utilisations'].sum()\n",
    "dispo_semences=dispo_alimentaire_cereales['Semences'].sum()\n",
    "dispo_traitement=dispo_alimentaire_cereales['Traitement'].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9319cfa2",
   "metadata": {},
   "source": [
    "### Puis nous allons calculer la part de chacune d'entre elles par rapport au total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1f66eecb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "42.75 % des céréales sont utilisés pour l'alimentation humaine.\n"
     ]
    }
   ],
   "source": [
    "#calcul de la part des céréales destinées à l'alimentation humaine\n",
    "part_dispo_nourriture=round((dispo_nourriture/dispo_cereales_total)*100,2)\n",
    "print(part_dispo_nourriture, \"% des céréales sont utilisés pour l'alimentation humaine.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa06527b",
   "metadata": {},
   "source": [
    "### <u> La proportion de céréales attribuées aux humains est de 42,75%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "7a52bba6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36.29 % des céréales sont utilisés pour l'alimentation animale.\n"
     ]
    }
   ],
   "source": [
    "part_dispo_animaux=round((dispo_animaux/dispo_cereales_total)*100,2)\n",
    "print(part_dispo_animaux, \"% des céréales sont utilisés pour l'alimentation animale.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "597b48b0",
   "metadata": {},
   "source": [
    "### <u> La proportion de céréales attribuéee aux animaux est de 36,29%"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "532bf248",
   "metadata": {},
   "source": [
    "### Nous allons faire une representation graphique de l'utilisation de céréales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "dd2c926b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 792x792 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dispo_cereales=('Animaux','Humains','Autres')\n",
    "\n",
    "pie_total=[36.29,42.75,20.95]\n",
    "\n",
    "plt.figure(figsize=(11,11))\n",
    "\n",
    "plt.pie(pie_total,labels=dispo_cereales, startangle=0,\n",
    "        colors=['yellow','red','lightgrey'],\n",
    "        autopct=\"%.1f%%\")\n",
    "\n",
    "plt.title(\"Repartition des céréales\", fontweight=\"bold\", size='20')\n",
    "\n",
    "plt.legend(title=\"Part de l'utilisation de cérales\", loc='lower right', )\n",
    "\n",
    "plt.show(block = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4835077b",
   "metadata": {},
   "source": [
    "## <u> 3. Proportion de Manioc exporté sur le total produit en Thaïlande."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "88ca2666",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion de manioc exportée : 83.41 %\n"
     ]
    }
   ],
   "source": [
    "#selectioner la ligne correspondante au manioc en Thaïlande dans la dataframe \"dsipo_alimentaire\"\n",
    "manioc_thailande=dispo_alimentaire[(dispo_alimentaire['Produit']== 'Manioc') & (dispo_alimentaire['Pays'] == 'Thaïlande')]\n",
    "\n",
    "#calculer la proportion de manioc exporté sur le total produit en Thaïlande\n",
    "part_export_manioc_thailande=manioc_thailande['Exportations - Quantité']/manioc_thailande['Production']*100\n",
    "print('Proportion de manioc exportée :', \"{:.2f}\".format(manioc_thailande['Exportations - Quantité'].iloc[0]*100 /manioc_thailande['Production'].iloc[0]),\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a4b94d0",
   "metadata": {},
   "source": [
    "### <u> 83,41% du manioc produit en Thaïlande est exporté"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "036f6c5b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La part de la population en sous-nutrition en Thaïlande est de 8.958267621309753 %\n"
     ]
    }
   ],
   "source": [
    "#selectioner la ligne correspondante à la Thaïlande dans la dataframe \"df_final2017\"\n",
    "snutrition_thailande=df_final2017.loc[(df_final2017['Pays'] == 'Thaïlande')]\n",
    "print(\"La part de la population en sous-nutrition en Thaïlande est de\", snutrition_thailande['Proportion_snutrition'].iloc[0],\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd8b2c7e",
   "metadata": {},
   "source": [
    "### <u> 8,96% de la population de la Thaïlande est en sous nutrition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ad38dd4c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Proportion de manioc servant à nourrire la population locale : 2.88 %\n"
     ]
    }
   ],
   "source": [
    "#calculer la proportion de manioc exporté sur le total produit en Thaïlande\n",
    "part_nourriture_manioc_thailande=manioc_thailande['Nourriture']/manioc_thailande['Production']*100\n",
    "print('Proportion de manioc servant à nourrire la population locale :', \"{:.2f}\".format(manioc_thailande['Nourriture'].iloc[0]*100 /manioc_thailande['Production'].iloc[0]),\"%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e2ccd6d",
   "metadata": {},
   "source": [
    "### <u> Seulement 2,88% de du manioc produit en Thaïlande sert à nourrire la population locale\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40ccc9e3",
   "metadata": {},
   "source": [
    "### La Thaïlande est l'un des principaux pays producteurs de manioc. En 2017, 83.41% de cette production était destiné à l'exportation.\n",
    "### Or, on constate également que 8,96 % des Thaïlandais étaient sous-alimentés sur la même année 2017. La Thaïlande exporte donc la plus grande partie de sa production de manioc, qui dans de nombreux pays constitue la base de l'alimentation, notamment en Afrique, alors même qu'une partie de sa population ne mange pas à sa faim."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c95822ea",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
