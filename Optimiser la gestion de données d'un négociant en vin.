{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3594cfbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "warnings.simplefilter('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d44c4d8c",
   "metadata": {},
   "source": [
    "# <u> Créer un NOTEBOOK qui visera à optimiser la gestion de données de la boutique BottleNeck. </u>\n",
    "Le Notebook est constitué de 3 parties. Une première mission visant à rapprocher deux fichiers, une deuxième mission pour faire apparaitre le chiffre d'affaires par produit ainsi que le total du chiffre d'affaires réalisé en ligne et une troisième mission qui consistera à s'assurer qu'il n'y a pas d'erreur de saisie dans certains prix de produits, de lister ces erreurs et d'en faire une représentation graphique pour une meilleure lisibilité.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0974abd7",
   "metadata": {},
   "source": [
    "# SOMMAIRE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c62aa0a",
   "metadata": {},
   "source": [
    "* [PARTIE 1: Rapprocher les deux fichiers](#Partie1)\n",
    "    * [Importer les DataFrames](#import)\n",
    "    * [A/ Analyse du fichier 'erp'](#analyseerp)\n",
    "    * [B/ Analyse du fichier 'web'](#analyseweb)\n",
    "    * [C/ Analyse du fichier 'liaison'](#analyseliaison)\n",
    "    * [D/ Jointure des fichiers](#jointure)\n",
    "* [PARTIE 2: Calculer les chiffre d'affaires par produit et le chiffre d'affaires total](#Partie2)\n",
    "    * [A/Calcul du chiffre d'affaires par produit](#caproduit)\n",
    "    * [B/Calcul du chiffre d'affaires total](#catotal)\n",
    "* [PARTIE 3: Vérifier s'il n'y a pas d'erreur de saisie dans les prix et faire un graphique.](#Partie3)\n",
    "    * [A/Chercher les outliers](#outliers)\n",
    "    * [B/Représenation graphique des outliers](#repgraph)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa28524d",
   "metadata": {},
   "source": [
    "# <u> PARTIE 1: Rapprocher les deux fichiers. </u> <a class=\"anchor\" id=\"Partie1\"></a>\n",
    "\n",
    "## Dans cette partie, nous allons faire rapprocher le fichier issu de l'ERP avec la table de l'outil CMS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18f5ad53",
   "metadata": {},
   "source": [
    "### Nous commencons par préparer le document sur lequel nous allons travailler <a class=\"anchor\" id=\"import\"></a>\n",
    "\n",
    "- Première étape: Importation des fichiers 'erp', 'web' et 'liaison'\n",
    "- Deuxième étape: Tester les Clés Primaires."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5195c5e8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#importation des dataframes\n",
    "erp = pd.read_excel('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P5/Annexes Projet/Annexes Mission/erp.xlsx', dtype=str, index_col=None)\n",
    "\n",
    "web = pd.read_excel('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P5/Annexes Projet/Annexes Mission/web.xlsx', dtype=str, index_col=None)\n",
    "\n",
    "liaison = pd.read_excel('/Users/carloscorreawalasek/Desktop/OPENCLASSROOMS/DATA ANALYST/PROJETS/P5/Annexes Projet/Annexes Mission/liaison.xlsx', dtype=str, index_col=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71904dbd",
   "metadata": {},
   "source": [
    "### A/ Analyse du fichier 'erp' <a class=\"anchor\" id=\"analyseerp\"></a>\n",
    "#### On va chercher une colonne qui respecte la valeur d'unicité"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b5e33a5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3847    1\n",
       "5610    1\n",
       "5564    1\n",
       "5565    1\n",
       "5566    1\n",
       "       ..\n",
       "4635    1\n",
       "4636    1\n",
       "4646    1\n",
       "4647    1\n",
       "7338    1\n",
       "Name: product_id, Length: 825, dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#voir les valeurs différentes de la colonne 'product_id'\n",
    "erp['product_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f17f94d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "product_id        0\n",
      "onsale_web        0\n",
      "price             0\n",
      "stock_quantity    0\n",
      "stock_status      0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#voir le nombre de valeurs manquantes\n",
    "print(erp.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8bc52f5",
   "metadata": {},
   "source": [
    "## <u> Dans le fichier 'erp', la colonne 'product_id' respecte l'unicité"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ab52b0e",
   "metadata": {},
   "source": [
    "### B/ Analyse du fichier 'web' <a class=\"anchor\" id=\"analyseweb\"></a>\n",
    "#### Au préalable, nous avons analysé le fichier sur Excel. Nous avons remarqué que les doublons de la colonne 'sku' avaient comme différence de données les valeurs de 'tax_status', 'post_excerpt', 'guid', 'post_type' et 'post_mime_type'.\n",
    "#### On va seleccioner les doublons qui possèdent le moins de valeurs manquantes (ou Nan)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "15198fa7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sku</th>\n",
       "      <th>virtual</th>\n",
       "      <th>downloadable</th>\n",
       "      <th>rating_count</th>\n",
       "      <th>average_rating</th>\n",
       "      <th>total_sales</th>\n",
       "      <th>tax_status</th>\n",
       "      <th>tax_class</th>\n",
       "      <th>post_author</th>\n",
       "      <th>post_date</th>\n",
       "      <th>...</th>\n",
       "      <th>post_name</th>\n",
       "      <th>post_modified</th>\n",
       "      <th>post_modified_gmt</th>\n",
       "      <th>post_content_filtered</th>\n",
       "      <th>post_parent</th>\n",
       "      <th>guid</th>\n",
       "      <th>menu_order</th>\n",
       "      <th>post_type</th>\n",
       "      <th>post_mime_type</th>\n",
       "      <th>comment_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>bon-cadeau-25-euros</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>taxable</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-06-01 13:53:46</td>\n",
       "      <td>...</td>\n",
       "      <td>bon-cadeau-de-25-euros</td>\n",
       "      <td>2018-06-01 14:13:57</td>\n",
       "      <td>2018-06-01 12:13:57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>15298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>taxable</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-08 12:58:52</td>\n",
       "      <td>...</td>\n",
       "      <td>pierre-jean-villa-saint-joseph-preface-2018</td>\n",
       "      <td>2019-12-30 09:30:29</td>\n",
       "      <td>2019-12-30 08:30:29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15296</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>taxable</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-08 13:49:41</td>\n",
       "      <td>...</td>\n",
       "      <td>pierre-jean-villa-saint-joseph-tilde-2017</td>\n",
       "      <td>2019-12-21 09:00:17</td>\n",
       "      <td>2019-12-21 08:00:17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>taxable</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-08 14:08:36</td>\n",
       "      <td>...</td>\n",
       "      <td>pierre-jean-villa-croze-hermitage-accroche-coe...</td>\n",
       "      <td>2020-06-26 18:15:03</td>\n",
       "      <td>2020-06-26 16:15:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19814</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>taxable</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-09 14:01:05</td>\n",
       "      <td>...</td>\n",
       "      <td>pierre-jean-villa-igp-gamine-2018</td>\n",
       "      <td>2020-01-04 16:36:01</td>\n",
       "      <td>2020-01-04 15:36:01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   sku virtual downloadable rating_count average_rating  \\\n",
       "0  bon-cadeau-25-euros       0            0            0              0   \n",
       "1                15298       0            0            0              0   \n",
       "2                15296       0            0            0              0   \n",
       "3                15300       0            0            0              0   \n",
       "4                19814       0            0            0              0   \n",
       "\n",
       "  total_sales tax_status tax_class post_author            post_date  ...  \\\n",
       "0          10    taxable       NaN           1  2018-06-01 13:53:46  ...   \n",
       "1           6    taxable       NaN           2  2018-02-08 12:58:52  ...   \n",
       "2           0    taxable       NaN           2  2018-02-08 13:49:41  ...   \n",
       "3           0    taxable       NaN           2  2018-02-08 14:08:36  ...   \n",
       "4           3    taxable       NaN           2  2018-02-09 14:01:05  ...   \n",
       "\n",
       "                                           post_name        post_modified  \\\n",
       "0                             bon-cadeau-de-25-euros  2018-06-01 14:13:57   \n",
       "1        pierre-jean-villa-saint-joseph-preface-2018  2019-12-30 09:30:29   \n",
       "2          pierre-jean-villa-saint-joseph-tilde-2017  2019-12-21 09:00:17   \n",
       "3  pierre-jean-villa-croze-hermitage-accroche-coe...  2020-06-26 18:15:03   \n",
       "4                  pierre-jean-villa-igp-gamine-2018  2020-01-04 16:36:01   \n",
       "\n",
       "     post_modified_gmt post_content_filtered post_parent  \\\n",
       "0  2018-06-01 12:13:57                   NaN           0   \n",
       "1  2019-12-30 08:30:29                   NaN           0   \n",
       "2  2019-12-21 08:00:17                   NaN           0   \n",
       "3  2020-06-26 16:15:03                   NaN           0   \n",
       "4  2020-01-04 15:36:01                   NaN           0   \n",
       "\n",
       "                                                guid menu_order post_type  \\\n",
       "0  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "1  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "2  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "3  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "4  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "\n",
       "  post_mime_type comment_count  \n",
       "0            NaN             0  \n",
       "1            NaN             0  \n",
       "2            NaN             0  \n",
       "3            NaN             0  \n",
       "4            NaN             0  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "web.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "058b137e",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bon-cadeau-25-euros    2\n",
       "14828                  2\n",
       "14679                  2\n",
       "15526                  2\n",
       "16305                  2\n",
       "                      ..\n",
       "15145                  2\n",
       "15801                  2\n",
       "15452                  2\n",
       "15038                  2\n",
       "16230                  2\n",
       "Name: sku, Length: 714, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#voir les valeurs différentes de la colonne 'sku'\n",
    "web['sku'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb8f6a09",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "sku                        85\n",
      "virtual                     0\n",
      "downloadable                0\n",
      "rating_count                0\n",
      "average_rating             83\n",
      "total_sales                83\n",
      "tax_status                797\n",
      "tax_class                1513\n",
      "post_author                83\n",
      "post_date                  83\n",
      "post_date_gmt              83\n",
      "post_content             1513\n",
      "post_title                 83\n",
      "post_excerpt              797\n",
      "post_status                83\n",
      "comment_status             83\n",
      "ping_status                83\n",
      "post_password            1513\n",
      "post_name                  83\n",
      "post_modified              83\n",
      "post_modified_gmt          83\n",
      "post_content_filtered    1513\n",
      "post_parent                83\n",
      "guid                       83\n",
      "menu_order                 83\n",
      "post_type                  83\n",
      "post_mime_type            799\n",
      "comment_count              83\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#voir le nombre de valeurs manquantes\n",
    "print(web.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "253c7bfc",
   "metadata": {},
   "source": [
    "### On va créer une nouvelle df qui ne comporte pas les cellules vides (ou Nan) ni les doublons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "430b17f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#supprimer les cellules Nan du dataframe 'web' sur la colonne 'tax_status'\n",
    "web1 = web[web['sku'].notna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0cb2511d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#isoler les \"sku\" dont le type de valeur diffère avec l'ensemble de la colonne et les masquer\n",
    "web2 = web1.mask(web1[\"sku\"] == 'bon-cadeau-25-euros','13127-1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "57ee86ec",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sku</th>\n",
       "      <th>virtual</th>\n",
       "      <th>downloadable</th>\n",
       "      <th>rating_count</th>\n",
       "      <th>average_rating</th>\n",
       "      <th>total_sales</th>\n",
       "      <th>tax_status</th>\n",
       "      <th>tax_class</th>\n",
       "      <th>post_author</th>\n",
       "      <th>post_date</th>\n",
       "      <th>...</th>\n",
       "      <th>post_name</th>\n",
       "      <th>post_modified</th>\n",
       "      <th>post_modified_gmt</th>\n",
       "      <th>post_content_filtered</th>\n",
       "      <th>post_parent</th>\n",
       "      <th>guid</th>\n",
       "      <th>menu_order</th>\n",
       "      <th>post_type</th>\n",
       "      <th>post_mime_type</th>\n",
       "      <th>comment_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>0</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>...</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>0</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>0</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>...</td>\n",
       "      <td>713</td>\n",
       "      <td>586</td>\n",
       "      <td>586</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>15298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>taxable</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-02-08 12:58:52</td>\n",
       "      <td>...</td>\n",
       "      <td>pierre-jean-villa-saint-joseph-preface-2018</td>\n",
       "      <td>2020-08-26 15:55:03</td>\n",
       "      <td>2020-08-26 13:55:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>329</td>\n",
       "      <td>713</td>\n",
       "      <td>NaN</td>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>NaN</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          sku virtual downloadable rating_count average_rating total_sales  \\\n",
       "count     713     713          713          713            713         713   \n",
       "unique    713       1            1            1              1          41   \n",
       "top     15298       0            0            0              0           0   \n",
       "freq        1     713          713          713            713         329   \n",
       "\n",
       "       tax_status tax_class post_author            post_date  ...  \\\n",
       "count         713         0         713                  713  ...   \n",
       "unique          1         0           1                  713  ...   \n",
       "top       taxable       NaN           2  2018-02-08 12:58:52  ...   \n",
       "freq          713       NaN         713                    1  ...   \n",
       "\n",
       "                                          post_name        post_modified  \\\n",
       "count                                           713                  713   \n",
       "unique                                          713                  586   \n",
       "top     pierre-jean-villa-saint-joseph-preface-2018  2020-08-26 15:55:03   \n",
       "freq                                              1                    7   \n",
       "\n",
       "          post_modified_gmt post_content_filtered post_parent  \\\n",
       "count                   713                     0         713   \n",
       "unique                  586                     0           1   \n",
       "top     2020-08-26 13:55:03                   NaN           0   \n",
       "freq                      7                   NaN         713   \n",
       "\n",
       "                                                     guid menu_order  \\\n",
       "count                                                 713        713   \n",
       "unique                                                713          1   \n",
       "top     https://www.bottle-neck.fr/?post_type=product&...          0   \n",
       "freq                                                    1        713   \n",
       "\n",
       "       post_type post_mime_type comment_count  \n",
       "count        713              0           713  \n",
       "unique         1              0             1  \n",
       "top      product            NaN             0  \n",
       "freq         713            NaN           713  \n",
       "\n",
       "[4 rows x 28 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#filtrer la nouvelle df sur la colonne \"post_type\" en ne selectionnant que les valeurs 'product' car les c'est ici que nous trouvons des doublons\n",
    "web3 = web2[web2['post_type'] == 'product']\n",
    "web3.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "67bebc66",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15298    1\n",
       "14827    1\n",
       "15526    1\n",
       "16305    1\n",
       "16306    1\n",
       "        ..\n",
       "15801    1\n",
       "15452    1\n",
       "15038    1\n",
       "15030    1\n",
       "16230    1\n",
       "Name: sku, Length: 713, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#assurer l'unicité des valeurs de la colonne \"sku\"\n",
    "web3['sku'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bb1c016",
   "metadata": {},
   "source": [
    "## <u> Dans le fichier 'web3', la colonne 'sku' respecte l'unicité\n",
    "### C'est à travers de cette colonne que se fera la jointure"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "366288b9",
   "metadata": {},
   "source": [
    "### C/ Analyse du fichier 'liaison' <a class=\"anchor\" id=\"analyseliaison\"></a>\n",
    "#### On veut savoir s'il existe une colonne qui respecte la valeur d'unicité"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "180116b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>id_web</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3847</td>\n",
       "      <td>15298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3849</td>\n",
       "      <td>15296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3850</td>\n",
       "      <td>15300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4032</td>\n",
       "      <td>19814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4039</td>\n",
       "      <td>19815</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  product_id id_web\n",
       "0       3847  15298\n",
       "1       3849  15296\n",
       "2       3850  15300\n",
       "3       4032  19814\n",
       "4       4039  19815"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liaison.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "731bee28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3847    1\n",
       "5610    1\n",
       "5564    1\n",
       "5565    1\n",
       "5566    1\n",
       "       ..\n",
       "4635    1\n",
       "4636    1\n",
       "4646    1\n",
       "4647    1\n",
       "7338    1\n",
       "Name: product_id, Length: 825, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#voir les valeurs différentes de la colonne 'product_id'\n",
    "liaison['product_id'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d776a4a5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "15298    1\n",
       "16305    1\n",
       "15138    1\n",
       "15753    1\n",
       "15756    1\n",
       "        ..\n",
       "15030    1\n",
       "15875    1\n",
       "16186    1\n",
       "14371    1\n",
       "16230    1\n",
       "Name: id_web, Length: 734, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#voir les valeurs différentes de la colonne 'id_web'\n",
    "liaison['id_web'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0fe70dc9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "product_id     0\n",
      "id_web        91\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#voir le nombre de valeurs manquantes\n",
    "print(liaison.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15b1686a",
   "metadata": {},
   "source": [
    "### D/ Jointure des fichiers <a class=\"anchor\" id=\"jointure\"></a>\n",
    "#### A présent, nous allons faire la jointure entre la DataFrame 'erp' et la DataFrame 'liaison' en désignant la colonne 'product_id' comme correspondance ou Clé Primaire\n",
    "\n",
    "Il va falloir à présent ajouter les informations de snutrition au dataframe population. Nous pourrons faire cela via la fonction [`merge`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html) de pandas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0a4dccbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#changer nom colonne id_web par 'sku' dans df 'web'\n",
    "liaison.rename(columns={'id_web':'sku'}, inplace='TRUE')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37ebaac1",
   "metadata": {},
   "source": [
    "### Avec la fonction merge \"Inner\" seulements les lignes avec une correspondance sont gardées. Le reste des lignes sont effacées"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6d97c4a3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>onsale_web</th>\n",
       "      <th>price</th>\n",
       "      <th>stock_quantity</th>\n",
       "      <th>stock_status</th>\n",
       "      <th>sku</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>825</td>\n",
       "      <td>825</td>\n",
       "      <td>825</td>\n",
       "      <td>825</td>\n",
       "      <td>825</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>825</td>\n",
       "      <td>2</td>\n",
       "      <td>381</td>\n",
       "      <td>128</td>\n",
       "      <td>2</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>3847</td>\n",
       "      <td>1</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>instock</td>\n",
       "      <td>15298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>717</td>\n",
       "      <td>15</td>\n",
       "      <td>188</td>\n",
       "      <td>638</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       product_id onsale_web price stock_quantity stock_status    sku\n",
       "count         825        825   825            825          825    734\n",
       "unique        825          2   381            128            2    734\n",
       "top          3847          1    45              0      instock  15298\n",
       "freq            1        717    15            188          638      1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# jointure des deux dataframe 'erp' et 'liaison'\n",
    "df_1 = pd.merge(erp, liaison, on='product_id', how='inner')\n",
    "df_1.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e1fd516",
   "metadata": {},
   "source": [
    "### A présent, nous allons faire la jointure entre la nouvelle DataFrame 'df_1' et la DataFrame 'web3' en désignant la colonne 'sku' comme correspondance ou Clé Primaire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "74c0d6dd",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>onsale_web</th>\n",
       "      <th>price</th>\n",
       "      <th>stock_quantity</th>\n",
       "      <th>stock_status</th>\n",
       "      <th>sku</th>\n",
       "      <th>virtual</th>\n",
       "      <th>downloadable</th>\n",
       "      <th>rating_count</th>\n",
       "      <th>average_rating</th>\n",
       "      <th>...</th>\n",
       "      <th>post_name</th>\n",
       "      <th>post_modified</th>\n",
       "      <th>post_modified_gmt</th>\n",
       "      <th>post_content_filtered</th>\n",
       "      <th>post_parent</th>\n",
       "      <th>guid</th>\n",
       "      <th>menu_order</th>\n",
       "      <th>post_type</th>\n",
       "      <th>post_mime_type</th>\n",
       "      <th>comment_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>...</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>0</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>0</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>362</td>\n",
       "      <td>126</td>\n",
       "      <td>2</td>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>713</td>\n",
       "      <td>586</td>\n",
       "      <td>586</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>3847</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>instock</td>\n",
       "      <td>15298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>pierre-jean-villa-saint-joseph-preface-2018</td>\n",
       "      <td>2020-08-26 15:55:03</td>\n",
       "      <td>2020-08-26 13:55:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>9</td>\n",
       "      <td>140</td>\n",
       "      <td>573</td>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>713</td>\n",
       "      <td>1</td>\n",
       "      <td>713</td>\n",
       "      <td>713</td>\n",
       "      <td>NaN</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       product_id onsale_web price stock_quantity stock_status    sku virtual  \\\n",
       "count         713        713   713            713          713    713     713   \n",
       "unique        713          1   362            126            2    713       1   \n",
       "top          3847          1    19              0      instock  15298       0   \n",
       "freq            1        713     9            140          573      1     713   \n",
       "\n",
       "       downloadable rating_count average_rating  ...  \\\n",
       "count           713          713            713  ...   \n",
       "unique            1            1              1  ...   \n",
       "top               0            0              0  ...   \n",
       "freq            713          713            713  ...   \n",
       "\n",
       "                                          post_name        post_modified  \\\n",
       "count                                           713                  713   \n",
       "unique                                          713                  586   \n",
       "top     pierre-jean-villa-saint-joseph-preface-2018  2020-08-26 15:55:03   \n",
       "freq                                              1                    7   \n",
       "\n",
       "          post_modified_gmt post_content_filtered post_parent  \\\n",
       "count                   713                     0         713   \n",
       "unique                  586                     0           1   \n",
       "top     2020-08-26 13:55:03                   NaN           0   \n",
       "freq                      7                   NaN         713   \n",
       "\n",
       "                                                     guid menu_order  \\\n",
       "count                                                 713        713   \n",
       "unique                                                713          1   \n",
       "top     https://www.bottle-neck.fr/?post_type=product&...          0   \n",
       "freq                                                    1        713   \n",
       "\n",
       "       post_type post_mime_type comment_count  \n",
       "count        713              0           713  \n",
       "unique         1              0             1  \n",
       "top      product            NaN             0  \n",
       "freq         713            NaN           713  \n",
       "\n",
       "[4 rows x 33 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# jointure des deux dataframe 'df_1' et 'web'\n",
    "df = pd.merge(df_1, web3, on='sku', how='inner')\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bc0c8f8",
   "metadata": {},
   "source": [
    "# <u> PARTIE 2: Calculer les chiffre d'affaires par produit et le chiffre d'affaires total. </u> <a class=\"anchor\" id=\"Partie2\"></a>\n",
    "\n",
    "### A/Calcul du chiffre d'affaires par produit  <a class=\"anchor\" id=\"caproduit\"></a>\n",
    "\n",
    "#### Changer les valeurs en numérique\n",
    "#### On va s'assurer que les données des deux colonnes que nous allons traiter ont des types de valeur numérique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aa9fa487",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "product_id               object\n",
       "onsale_web               object\n",
       "price                    object\n",
       "stock_quantity           object\n",
       "stock_status             object\n",
       "sku                      object\n",
       "virtual                  object\n",
       "downloadable             object\n",
       "rating_count             object\n",
       "average_rating           object\n",
       "total_sales              object\n",
       "tax_status               object\n",
       "tax_class                object\n",
       "post_author              object\n",
       "post_date                object\n",
       "post_date_gmt            object\n",
       "post_content             object\n",
       "post_title               object\n",
       "post_excerpt             object\n",
       "post_status              object\n",
       "comment_status           object\n",
       "ping_status              object\n",
       "post_password            object\n",
       "post_name                object\n",
       "post_modified            object\n",
       "post_modified_gmt        object\n",
       "post_content_filtered    object\n",
       "post_parent              object\n",
       "guid                     object\n",
       "menu_order               object\n",
       "post_type                object\n",
       "post_mime_type           object\n",
       "comment_count            object\n",
       "dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e3ef9f75",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#convertir le type de donnée 'price' de object à float\n",
    "df['price'] = df['price'].astype(str).astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "24d81dff",
   "metadata": {},
   "outputs": [],
   "source": [
    "#convertir le type de donnée 'total_sales' de object à float\n",
    "df['total_sales'] = df['total_sales'].astype(str).astype(float)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3588c4a0",
   "metadata": {},
   "source": [
    "### Ci-dessous, un tableau récapitulatif avec les caracteristiques de chaque produit (ID, nom, prix, nombre de ventes et chiffre d'affaires) ordonnées du chiffre d'affaires plus grand au plus petit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8ceea317",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>onsale_web</th>\n",
       "      <th>price</th>\n",
       "      <th>stock_quantity</th>\n",
       "      <th>stock_status</th>\n",
       "      <th>sku</th>\n",
       "      <th>virtual</th>\n",
       "      <th>downloadable</th>\n",
       "      <th>rating_count</th>\n",
       "      <th>average_rating</th>\n",
       "      <th>...</th>\n",
       "      <th>post_modified</th>\n",
       "      <th>post_modified_gmt</th>\n",
       "      <th>post_content_filtered</th>\n",
       "      <th>post_parent</th>\n",
       "      <th>guid</th>\n",
       "      <th>menu_order</th>\n",
       "      <th>post_type</th>\n",
       "      <th>post_mime_type</th>\n",
       "      <th>comment_count</th>\n",
       "      <th>chiffre_daffaires</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3847</td>\n",
       "      <td>1</td>\n",
       "      <td>24.2</td>\n",
       "      <td>0</td>\n",
       "      <td>outofstock</td>\n",
       "      <td>15298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2019-12-30 09:30:29</td>\n",
       "      <td>2019-12-30 08:30:29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>145.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3849</td>\n",
       "      <td>1</td>\n",
       "      <td>34.3</td>\n",
       "      <td>0</td>\n",
       "      <td>outofstock</td>\n",
       "      <td>15296</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2019-12-21 09:00:17</td>\n",
       "      <td>2019-12-21 08:00:17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3850</td>\n",
       "      <td>1</td>\n",
       "      <td>20.8</td>\n",
       "      <td>0</td>\n",
       "      <td>outofstock</td>\n",
       "      <td>15300</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2020-06-26 18:15:03</td>\n",
       "      <td>2020-06-26 16:15:03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4032</td>\n",
       "      <td>1</td>\n",
       "      <td>14.1</td>\n",
       "      <td>0</td>\n",
       "      <td>outofstock</td>\n",
       "      <td>19814</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2020-01-04 16:36:01</td>\n",
       "      <td>2020-01-04 15:36:01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>42.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4039</td>\n",
       "      <td>1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0</td>\n",
       "      <td>outofstock</td>\n",
       "      <td>19815</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2020-01-04 16:36:10</td>\n",
       "      <td>2020-01-04 15:36:10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>https://www.bottle-neck.fr/?post_type=product&amp;...</td>\n",
       "      <td>0</td>\n",
       "      <td>product</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  product_id onsale_web  price stock_quantity stock_status    sku virtual  \\\n",
       "0       3847          1   24.2              0   outofstock  15298       0   \n",
       "1       3849          1   34.3              0   outofstock  15296       0   \n",
       "2       3850          1   20.8              0   outofstock  15300       0   \n",
       "3       4032          1   14.1              0   outofstock  19814       0   \n",
       "4       4039          1   46.0              0   outofstock  19815       0   \n",
       "\n",
       "  downloadable rating_count average_rating  ...        post_modified  \\\n",
       "0            0            0              0  ...  2019-12-30 09:30:29   \n",
       "1            0            0              0  ...  2019-12-21 09:00:17   \n",
       "2            0            0              0  ...  2020-06-26 18:15:03   \n",
       "3            0            0              0  ...  2020-01-04 16:36:01   \n",
       "4            0            0              0  ...  2020-01-04 16:36:10   \n",
       "\n",
       "     post_modified_gmt post_content_filtered post_parent  \\\n",
       "0  2019-12-30 08:30:29                   NaN           0   \n",
       "1  2019-12-21 08:00:17                   NaN           0   \n",
       "2  2020-06-26 16:15:03                   NaN           0   \n",
       "3  2020-01-04 15:36:01                   NaN           0   \n",
       "4  2020-01-04 15:36:10                   NaN           0   \n",
       "\n",
       "                                                guid menu_order post_type  \\\n",
       "0  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "1  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "2  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "3  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "4  https://www.bottle-neck.fr/?post_type=product&...          0   product   \n",
       "\n",
       "  post_mime_type comment_count chiffre_daffaires  \n",
       "0            NaN             0             145.2  \n",
       "1            NaN             0               0.0  \n",
       "2            NaN             0               0.0  \n",
       "3            NaN             0              42.3  \n",
       "4            NaN             0               0.0  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calcul du chiffre d'affaire par produit (prix x nombre total de ventes)\n",
    "df['chiffre_daffaires'] = df['price'] * df['total_sales']\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a0d5c0c9",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>post_title</th>\n",
       "      <th>price</th>\n",
       "      <th>total_sales</th>\n",
       "      <th>chiffre_daffaires</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>4334</td>\n",
       "      <td>Champagne Gosset Grand Blanc de Blancs</td>\n",
       "      <td>49.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>4704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>4144</td>\n",
       "      <td>Champagne Gosset Grand Rosé</td>\n",
       "      <td>49.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>4263.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>4402</td>\n",
       "      <td>Cognac Frapin VIP XO</td>\n",
       "      <td>176.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2288.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>4142</td>\n",
       "      <td>Champagne Gosset Grand Millésime 2006</td>\n",
       "      <td>53.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1590.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>4141</td>\n",
       "      <td>Champagne Gosset Grande Réserve</td>\n",
       "      <td>39.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>1560.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>4924</td>\n",
       "      <td>Cave de Castelmaure Corbières Rouge Grande Cuv...</td>\n",
       "      <td>12.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>4130</td>\n",
       "      <td>Zind-Humbrecht Pinot Gris Roche Calcaire 2017</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>4132</td>\n",
       "      <td>Zind-Humbrecht Pinot Gris Grand Cru Rangen De ...</td>\n",
       "      <td>88.4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>4137</td>\n",
       "      <td>Zind-Humbrecht Muscat Grand Cru Goldert 2015</td>\n",
       "      <td>29.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>712</th>\n",
       "      <td>7338</td>\n",
       "      <td>Domaine Saint-Nicolas Vin de France Blanc Les ...</td>\n",
       "      <td>16.3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>713 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    product_id                                         post_title  price  \\\n",
       "194       4334             Champagne Gosset Grand Blanc de Blancs   49.0   \n",
       "71        4144                        Champagne Gosset Grand Rosé   49.0   \n",
       "218       4402                               Cognac Frapin VIP XO  176.0   \n",
       "70        4142              Champagne Gosset Grand Millésime 2006   53.0   \n",
       "69        4141                    Champagne Gosset Grande Réserve   39.0   \n",
       "..         ...                                                ...    ...   \n",
       "394       4924  Cave de Castelmaure Corbières Rouge Grande Cuv...   12.8   \n",
       "64        4130      Zind-Humbrecht Pinot Gris Roche Calcaire 2017   23.0   \n",
       "65        4132  Zind-Humbrecht Pinot Gris Grand Cru Rangen De ...   88.4   \n",
       "66        4137       Zind-Humbrecht Muscat Grand Cru Goldert 2015   29.8   \n",
       "712       7338  Domaine Saint-Nicolas Vin de France Blanc Les ...   16.3   \n",
       "\n",
       "     total_sales  chiffre_daffaires  \n",
       "194         96.0             4704.0  \n",
       "71          87.0             4263.0  \n",
       "218         13.0             2288.0  \n",
       "70          30.0             1590.0  \n",
       "69          40.0             1560.0  \n",
       "..           ...                ...  \n",
       "394          0.0                0.0  \n",
       "64           0.0                0.0  \n",
       "65           0.0                0.0  \n",
       "66           0.0                0.0  \n",
       "712          0.0                0.0  \n",
       "\n",
       "[713 rows x 5 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#créer une df avec les variables qu'on veut faire apparaitre (ID produit, prix, nombre de ventes, chiffre d'affaires)\n",
    "df_caproduit = df[['product_id','post_title', 'price', 'total_sales', 'chiffre_daffaires']]\n",
    "\n",
    "#ordonner les produits par chiffre d'affaires du plus grand au plus petit\n",
    "df_caproduit.sort_values(by=['chiffre_daffaires'], ascending = False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a233862",
   "metadata": {},
   "source": [
    "### Ci-dessous, le même tableau récapitulatif mais sans les produits à vente 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f390719d",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>post_title</th>\n",
       "      <th>price</th>\n",
       "      <th>total_sales</th>\n",
       "      <th>chiffre_daffaires</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>4334</td>\n",
       "      <td>Champagne Gosset Grand Blanc de Blancs</td>\n",
       "      <td>49.0</td>\n",
       "      <td>96.0</td>\n",
       "      <td>4704.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>4144</td>\n",
       "      <td>Champagne Gosset Grand Rosé</td>\n",
       "      <td>49.0</td>\n",
       "      <td>87.0</td>\n",
       "      <td>4263.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>4402</td>\n",
       "      <td>Cognac Frapin VIP XO</td>\n",
       "      <td>176.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2288.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70</th>\n",
       "      <td>4142</td>\n",
       "      <td>Champagne Gosset Grand Millésime 2006</td>\n",
       "      <td>53.0</td>\n",
       "      <td>30.0</td>\n",
       "      <td>1590.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69</th>\n",
       "      <td>4141</td>\n",
       "      <td>Champagne Gosset Grande Réserve</td>\n",
       "      <td>39.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>1560.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>4241</td>\n",
       "      <td>Parcé Frères IGP Côtes Catalanes Hommage à Fer...</td>\n",
       "      <td>8.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>4245</td>\n",
       "      <td>Parcé Frères IGP Pays d'Oc Zoé Viognier 2019</td>\n",
       "      <td>8.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>4171</td>\n",
       "      <td>Le Hameau Des Ollieux Monsieur Pinot 2017</td>\n",
       "      <td>7.8</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>5056</td>\n",
       "      <td>Domaine de Montgilet Anjou Rouge 2016</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>359</th>\n",
       "      <td>4858</td>\n",
       "      <td>Château Turcaud Bordeaux Rosé 2019</td>\n",
       "      <td>6.5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>384 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    product_id                                         post_title  price  \\\n",
       "194       4334             Champagne Gosset Grand Blanc de Blancs   49.0   \n",
       "71        4144                        Champagne Gosset Grand Rosé   49.0   \n",
       "218       4402                               Cognac Frapin VIP XO  176.0   \n",
       "70        4142              Champagne Gosset Grand Millésime 2006   53.0   \n",
       "69        4141                    Champagne Gosset Grande Réserve   39.0   \n",
       "..         ...                                                ...    ...   \n",
       "149       4241  Parcé Frères IGP Côtes Catalanes Hommage à Fer...    8.9   \n",
       "152       4245       Parcé Frères IGP Pays d'Oc Zoé Viognier 2019    8.9   \n",
       "96        4171          Le Hameau Des Ollieux Monsieur Pinot 2017    7.8   \n",
       "440       5056              Domaine de Montgilet Anjou Rouge 2016    7.5   \n",
       "359       4858                 Château Turcaud Bordeaux Rosé 2019    6.5   \n",
       "\n",
       "     total_sales  chiffre_daffaires  \n",
       "194         96.0             4704.0  \n",
       "71          87.0             4263.0  \n",
       "218         13.0             2288.0  \n",
       "70          30.0             1590.0  \n",
       "69          40.0             1560.0  \n",
       "..           ...                ...  \n",
       "149          1.0                8.9  \n",
       "152          1.0                8.9  \n",
       "96           1.0                7.8  \n",
       "440          1.0                7.5  \n",
       "359          1.0                6.5  \n",
       "\n",
       "[384 rows x 5 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#faire apparaitre que les produit avec au moins une vente\n",
    "df_produit_vente = df_caproduit[df_caproduit['total_sales'] > 0]\n",
    "#ordonner les produits par chiffre d'affaires du plus grand au plus petit\n",
    "df_produit_vente.sort_values(by=['chiffre_daffaires'], ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b184ddb4",
   "metadata": {},
   "source": [
    "### B/ Calcul du chiffre d'affaires total  <a class=\"anchor\" id=\"caglobal\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6fe41915",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Le chiffre d'affaires total est de 70318.6 euros\n"
     ]
    }
   ],
   "source": [
    "#additioner tous les chiffres d'affaires par produit pour avoir le chiffre d'affaires total\n",
    "df_c_a_total =sum(df_produit_vente['chiffre_daffaires'])\n",
    "print(\"Le chiffre d'affaires total est de\", df_c_a_total, \"euros\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbba3714",
   "metadata": {},
   "source": [
    "# <u> PARTIE 3: Vérifier s'il n'y a pas d'erreur de saisie dans les prix et faire un graphique. </u> <a class=\"anchor\" id=\"partie3\"></a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e7274d8c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.value_counts of     product_id  price\n",
       "0         3847   24.2\n",
       "1         3849   34.3\n",
       "2         3850   20.8\n",
       "3         4032   14.1\n",
       "4         4039   46.0\n",
       "..         ...    ...\n",
       "708       6930    8.4\n",
       "709       7023   27.5\n",
       "710       7025   69.0\n",
       "711       7247   54.8\n",
       "712       7338   16.3\n",
       "\n",
       "[713 rows x 2 columns]>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#seleccioner seulement les éléments qu'on voudrait voir representés\n",
    "df_prix = df[['product_id','price']]\n",
    "df_prix.value_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "39050fd7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pour la variable  price\n",
      "Maximum :  225.0\n",
      "Minimum :  5.2\n"
     ]
    }
   ],
   "source": [
    "#voir les données maximales et minimales pour la variable de \"prix\"\n",
    "for var in [\"price\"]:\n",
    "    print('Pour la variable ', var)\n",
    "    print('Maximum : ', df[var].max())\n",
    "    print('Minimum : ', df[var].min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e67e28fc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'whiskers': [<matplotlib.lines.Line2D at 0x7f88b55128b0>,\n",
       "  <matplotlib.lines.Line2D at 0x7f88b5512b80>],\n",
       " 'caps': [<matplotlib.lines.Line2D at 0x7f88b5512f10>,\n",
       "  <matplotlib.lines.Line2D at 0x7f88b552e160>],\n",
       " 'boxes': [<matplotlib.lines.Line2D at 0x7f88b55125e0>],\n",
       " 'medians': [<matplotlib.lines.Line2D at 0x7f88b552e430>],\n",
       " 'fliers': [<matplotlib.lines.Line2D at 0x7f88b552e700>],\n",
       " 'means': []}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#représenter visuellement les données prix pour voir apparaitre les outliers\n",
    "plt.boxplot(df_prix['price'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de6b9bdf",
   "metadata": {},
   "source": [
    "### A/ Chercher les outliers <a class=\"anchor\" id=\"outliers\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e50ab04",
   "metadata": {},
   "source": [
    "#### Méthode Z-score\n",
    "\n",
    "#### On aura un seuil pour considerer si cest un outlier ou pas (entre -1 et 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c4f7772b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Le prix moyen dune bouteille est de 32.50364656381488 euros\n"
     ]
    }
   ],
   "source": [
    "#calculer le prix moyen appelé \"m\"\n",
    "m = df['price'].mean()\n",
    "print ('Le prix moyen dune bouteille est de', m, 'euros')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "67054c5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L'écart type des prix des bouteilles est de 27.82862912619748\n"
     ]
    }
   ],
   "source": [
    "#calculer l'écart-type appelé \"s\"\n",
    "s = df['price'].std()\n",
    "print (\"L'écart type des prix des bouteilles est de\", s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e1dfba17",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>price</th>\n",
       "      <th>zscore</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3847</td>\n",
       "      <td>24.2</td>\n",
       "      <td>-0.298385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3849</td>\n",
       "      <td>34.3</td>\n",
       "      <td>0.064551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3850</td>\n",
       "      <td>20.8</td>\n",
       "      <td>-0.420561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4032</td>\n",
       "      <td>14.1</td>\n",
       "      <td>-0.661321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4039</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.484981</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  product_id  price    zscore\n",
       "0       3847   24.2 -0.298385\n",
       "1       3849   34.3  0.064551\n",
       "2       3850   20.8 -0.420561\n",
       "3       4032   14.1 -0.661321\n",
       "4       4039   46.0  0.484981"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#calculer le z-score et les présenter dans une nouvelle colonne appelée \"zscore\"\n",
    "df_prix['zscore'] = ((df['price'] - m) / s)\n",
    "df_prix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f7cd293c",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pour la variable  zscore\n",
      "Maximum :  6.9172057510720775\n",
      "Minimum :  -0.9811351626412533\n"
     ]
    }
   ],
   "source": [
    "#voir les données maximales et minimales pour la variable de \"zscore\"\n",
    "for var in [\"zscore\"]:\n",
    "    print('Pour la variable ', var)\n",
    "    print('Maximum : ', df_prix[var].max())\n",
    "    print('Minimum : ', df_prix[var].min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bb4353fd",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>product_id</th>\n",
       "      <th>price</th>\n",
       "      <th>zscore</th>\n",
       "      <th>outlier</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3847</td>\n",
       "      <td>24.2</td>\n",
       "      <td>-0.298385</td>\n",
       "      <td>non</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3849</td>\n",
       "      <td>34.3</td>\n",
       "      <td>0.064551</td>\n",
       "      <td>non</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3850</td>\n",
       "      <td>20.8</td>\n",
       "      <td>-0.420561</td>\n",
       "      <td>non</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4032</td>\n",
       "      <td>14.1</td>\n",
       "      <td>-0.661321</td>\n",
       "      <td>non</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4039</td>\n",
       "      <td>46.0</td>\n",
       "      <td>0.484981</td>\n",
       "      <td>non</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  product_id  price    zscore outlier\n",
       "0       3847   24.2 -0.298385     non\n",
       "1       3849   34.3  0.064551     non\n",
       "2       3850   20.8 -0.420561     non\n",
       "3       4032   14.1 -0.661321     non\n",
       "4       4039   46.0  0.484981     non"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#créer une nouvelle colonne 'outlier' et designer une valeur en fonction du zscore (hors limites entre -1 et 2)\n",
    "df_prix['outlier'] = np.where((df_prix['zscore'] < 2) & (df_prix['zscore'] > -1), 'non', 'oui')\n",
    "df_prix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9aff24b1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "non    683\n",
       "oui     30\n",
       "Name: outlier, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#montrer les outliers\n",
    "df_prix['outlier'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cffbab53",
   "metadata": {},
   "source": [
    "### A travers de la méthode Z-score, nous avons 30 outliers dans cette liste de produits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f952f68",
   "metadata": {},
   "source": [
    "#### Méthode Inter-quartile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dae4c0bc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valeurs aberrantes:\n",
      "     price\n",
      "63   100.0\n",
      "65    88.4\n",
      "199  225.0\n",
      "201  126.5\n",
      "205   85.6\n",
      "218  176.0\n",
      "219  108.5\n",
      "221  157.0\n",
      "222  104.0\n",
      "227  109.6\n",
      "380  102.3\n",
      "381  137.0\n",
      "425  217.5\n",
      "430  105.0\n",
      "431  105.0\n",
      "436  112.0\n",
      "437   86.8\n",
      "501   92.0\n",
      "510  124.8\n",
      "552  175.0\n",
      "586  191.3\n",
      "601   93.0\n",
      "602  122.0\n",
      "603  114.0\n",
      "641  135.0\n",
      "646  105.6\n",
      "647  116.4\n",
      "652  115.0\n",
      "653  121.0\n",
      "654   99.0\n",
      "655  115.0\n",
      "656  121.0\n"
     ]
    }
   ],
   "source": [
    "# Chargement des données\n",
    "df = pd.DataFrame(df_prix, columns=['price'])\n",
    "\n",
    "# Détection des valeurs aberrantes\n",
    "q1 = df_prix['price'].quantile(0.25)\n",
    "q3 = df_prix['price'].quantile(0.75)\n",
    "iqr = q3 - q1\n",
    "lower_bound = q1 - (1.5 * iqr)\n",
    "upper_bound = q3 + (1.5 * iqr)\n",
    "outliers = df[(df_prix['price'] < lower_bound) | (df_prix['price'] > upper_bound)]\n",
    "\n",
    "# Affichage des valeurs aberrantes\n",
    "print(\"Valeurs aberrantes:\")\n",
    "print(outliers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c373e2d",
   "metadata": {},
   "source": [
    "### A travers de la méthode Inter-quartile, nous avons 32 outliers dans cette liste de produits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9640f0d",
   "metadata": {},
   "source": [
    "### B/ Représenation graphique des outliers  <a class=\"anchor\" id=\"repgraph\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff350475",
   "metadata": {},
   "source": [
    "### 1ère représentation graphique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5d22484d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#représentation graphique en boite à moustache des outliers\n",
    "labels= ['']\n",
    "flierprops = dict(marker='o', markerfacecolor='firebrick', markersize=12,linestyle='none')\n",
    "plt.boxplot(x=df_prix['price'], labels=labels, flierprops=flierprops, vert=False, patch_artist=True, showmeans=True)\n",
    "plt.title(\"Prix des bouteilles disponibles sur le site\",fontsize=14, y=1.1, weight='bold')\n",
    "plt.ylabel('')\n",
    "plt.xlabel('Prix (€)',fontsize=12, y=1.1, weight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d19620c",
   "metadata": {},
   "source": [
    "### 2ème représentation graphique"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "950d31c2",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-28.050000000000004"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lower_bound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "1ea6cd75",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "84.35000000000001"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "upper_bound"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "e38228dd",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "708    False\n",
       "709    False\n",
       "710    False\n",
       "711    False\n",
       "712    False\n",
       "Name: price, Length: 713, dtype: bool"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outlier = df_prix['price'] > upper_bound\n",
    "outlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "19de46b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='price'>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#représentation graphique en nuage de points des outliers\n",
    "sns.scatterplot(x=df_prix.index, y=df_prix['price'], hue=outlier, palette=\"muted\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
